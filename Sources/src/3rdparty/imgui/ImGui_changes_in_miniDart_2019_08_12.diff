diff -Naur old/imgui.cpp new/imgui.cpp
--- old/imgui.cpp	2019-08-12 08:47:19.000000000 +0200
+++ new/imgui.cpp	2019-08-12 09:35:05.000000000 +0200
@@ -1192,6 +1192,7 @@
     ScrollbarRounding       = 9.0f;             // Radius of grab corners rounding for scrollbar
     GrabMinSize             = 10.0f;            // Minimum width/height of a grab box for slider/scrollbar
     GrabRounding            = 0.0f;             // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
+    SliderThicknessScale    = 0.60f;             // % of maximal tab rectangle thickness. Set to 0.0f to have rectangular slider, 1.0f to eliminate it.
     TabRounding             = 4.0f;             // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
     TabBorderSize           = 0.0f;             // Thickness of border around tabs.
     ColorButtonPosition     = ImGuiDir_Right;   // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
@@ -6963,6 +6964,7 @@
     { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, ScrollbarRounding) },   // ImGuiStyleVar_ScrollbarRounding
     { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, GrabMinSize) },         // ImGuiStyleVar_GrabMinSize
     { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, GrabRounding) },        // ImGuiStyleVar_GrabRounding
+    { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, SliderThicknessScale) }, // ImGuiStyleVar_SliderThicknessScale
     { ImGuiDataType_Float, 1, (ImU32)IM_OFFSETOF(ImGuiStyle, TabRounding) },         // ImGuiStyleVar_TabRounding
     { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, ButtonTextAlign) },     // ImGuiStyleVar_ButtonTextAlign
     { ImGuiDataType_Float, 2, (ImU32)IM_OFFSETOF(ImGuiStyle, SelectableTextAlign) }, // ImGuiStyleVar_SelectableTextAlign
diff -Naur old/imgui_demo.cpp new/imgui_demo.cpp
--- old/imgui_demo.cpp	2019-08-12 08:47:19.000000000 +0200
+++ new/imgui_demo.cpp	2019-08-12 09:45:40.000000000 +0200
@@ -1467,6 +1467,10 @@
         const float spacing = 4;
         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));
 
+        static float sliderThicknessScale = 1.0f;
+        ImGui::SliderFloat("Slider Thickness", &sliderThicknessScale, 0.0f, 1.0f, "%.2f");
+        ImGui::PushStyleVar(ImGuiStyleVar_SliderThicknessScale, sliderThicknessScale);
+
         static int int_value = 0;
         ImGui::VSliderInt("##int", ImVec2(18,160), &int_value, 0, 5);
         ImGui::SameLine();
@@ -3208,6 +3212,9 @@
     // Simplified Settings
     if (ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f"))
         style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding
+
+    ImGui::SliderFloat("Slider Thickness", &style.SliderThicknessScale, 0.0f, 1.0f, "%.2f"); // Minimal displayed value is no frame
+
     { bool window_border = (style.WindowBorderSize > 0.0f); if (ImGui::Checkbox("WindowBorder", &window_border)) style.WindowBorderSize = window_border ? 1.0f : 0.0f; }
     ImGui::SameLine();
     { bool frame_border = (style.FrameBorderSize > 0.0f); if (ImGui::Checkbox("FrameBorder", &frame_border)) style.FrameBorderSize = frame_border ? 1.0f : 0.0f; }
diff -Naur old/imgui.h new/imgui.h
--- old/imgui.h	2019-08-12 08:47:19.000000000 +0200
+++ new/imgui.h	2019-08-12 09:36:24.000000000 +0200
@@ -1173,6 +1173,7 @@
     ImGuiStyleVar_ScrollbarRounding,   // float     ScrollbarRounding
     ImGuiStyleVar_GrabMinSize,         // float     GrabMinSize
     ImGuiStyleVar_GrabRounding,        // float     GrabRounding
+    ImGuiStyleVar_SliderThicknessScale,// float     SliderTicknessScale
     ImGuiStyleVar_TabRounding,         // float     TabRounding
     ImGuiStyleVar_ButtonTextAlign,     // ImVec2    ButtonTextAlign
     ImGuiStyleVar_SelectableTextAlign, // ImVec2    SelectableTextAlign
@@ -1372,6 +1373,7 @@
     float       ScrollbarRounding;          // Radius of grab corners for scrollbar.
     float       GrabMinSize;                // Minimum width/height of a grab box for slider/scrollbar.
     float       GrabRounding;               // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
+    float       SliderThicknessScale;       // Tab thickness in sliders. Ratio of the rectangle witdh. Can be set between 0.0f (rectangle witdh is null)
     float       TabRounding;                // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs.
     float       TabBorderSize;              // Thickness of border around tabs.
     ImGuiDir    ColorButtonPosition;        // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right.
diff -Naur old/imgui_themes.cpp new/imgui_themes.cpp
--- old/imgui_themes.cpp	1970-01-01 01:00:00.000000000 +0100
+++ new/imgui_themes.cpp	2019-08-12 09:59:27.000000000 +0200
@@ -0,0 +1,171 @@
+/* **************************************************************************************
+ *    Author: Eric Bachard
+ *    eric.bachard@free.fr
+ *    2018 december 30th
+ *
+ *                                  MIT License
+ *                                  -----------
+ *                               eric.bachard@free.fr
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ * **************************************************************************************/
+#include "imgui_themes.h"
+
+// Legacy miniDart theme
+void ImGui::StyleColorsLightGreen(ImGuiStyle* dst)
+{
+    ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();
+    ImVec4* colors = style->Colors;
+
+    style->WindowRounding    = 2.0f;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows
+    style->ScrollbarRounding = 3.0f;             // Radius of grab corners rounding for scrollbar
+    style->GrabRounding      = 2.0f;             // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
+    style->AntiAliasedLines  = true;
+    style->AntiAliasedFill   = true;
+    style->WindowRounding    = 2.0f;
+    style->ChildRounding     = 2.0f;
+    style->ScrollbarSize     = 16.0f;
+    style->ScrollbarRounding = 3.0f;
+    style->GrabRounding      = 2.0f;
+    style->ItemSpacing.x     = 10.0f;
+    style->ItemSpacing.y     = 4.0f;
+    style->IndentSpacing     = 22.0f;
+    style->FramePadding.x    = 6.0f;
+    style->FramePadding.y    = 4.0f;
+    style->Alpha             = 1.0f;
+    style->FrameRounding     = 3.0f;
+
+    colors[ImGuiCol_Text]                   = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
+    colors[ImGuiCol_TextDisabled]          = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
+    colors[ImGuiCol_WindowBg]              = ImVec4(0.86f, 0.86f, 0.86f, 1.00f);
+// unused ??
+    colors[ImGuiCol_ChildWindowBg]         = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
+// ??
+    colors[ImGuiCol_ChildBg]                = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
+    colors[ImGuiCol_PopupBg]                = ImVec4(0.93f, 0.93f, 0.93f, 0.98f);
+    colors[ImGuiCol_Border]                = ImVec4(0.71f, 0.71f, 0.71f, 0.08f);
+    colors[ImGuiCol_BorderShadow]          = ImVec4(0.00f, 0.00f, 0.00f, 0.04f);
+    colors[ImGuiCol_FrameBg]               = ImVec4(0.71f, 0.71f, 0.71f, 0.55f);
+    colors[ImGuiCol_FrameBgHovered]        = ImVec4(0.94f, 0.94f, 0.94f, 0.55f);
+    colors[ImGuiCol_FrameBgActive]         = ImVec4(0.71f, 0.78f, 0.69f, 0.98f);
+//    colors[ImGuiCol_TitleBg]               = ImVec4(0.85f, 0.85f, 0.85f, 1.00f);
+// Testing new color scheme
+    colors[ImGuiCol_TitleBg]               = ImVec4(0.718f, 0.816f, 0.451f, 1.00f);
+    colors[ImGuiCol_TitleBgCollapsed]      = ImVec4(0.82f, 0.78f, 0.78f, 0.51f);
+//    colors[ImGuiCol_TitleBgActive]         = ImVec4(0.78f, 0.78f, 0.78f, 1.00f);
+// Testing new color scheme
+    colors[ImGuiCol_TitleBgActive]         = ImVec4(1.00f, 0.823f, 0.369f, 1.00f);
+    colors[ImGuiCol_MenuBarBg]             = ImVec4(0.86f, 0.86f, 0.86f, 1.00f);
+    colors[ImGuiCol_ScrollbarBg]           = ImVec4(0.20f, 0.25f, 0.30f, 0.61f);
+    colors[ImGuiCol_ScrollbarGrab]         = ImVec4(0.90f, 0.90f, 0.90f, 0.30f);
+    colors[ImGuiCol_ScrollbarGrabHovered]  = ImVec4(0.92f, 0.92f, 0.92f, 0.78f);
+    colors[ImGuiCol_ScrollbarGrabActive]   = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
+    colors[ImGuiCol_CheckMark]             = ImVec4(0.184f, 0.407f, 0.193f, 1.00f);
+    colors[ImGuiCol_SliderGrab]            = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);
+    colors[ImGuiCol_SliderGrabActive]      = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
+    colors[ImGuiCol_Button]                = ImVec4(0.71f, 0.78f, 0.69f, 0.40f);
+    colors[ImGuiCol_ButtonHovered]         = ImVec4(0.725f, 0.805f, 0.702f, 1.00f);
+    colors[ImGuiCol_ButtonActive]          = ImVec4(0.793f, 0.900f, 0.836f, 1.00f);
+    colors[ImGuiCol_Header]                = ImVec4(0.71f, 0.78f, 0.69f, 0.31f);
+    colors[ImGuiCol_HeaderHovered]         = ImVec4(0.71f, 0.78f, 0.69f, 0.80f);
+    colors[ImGuiCol_HeaderActive]          = ImVec4(0.71f, 0.78f, 0.69f, 1.00f);
+    colors[ImGuiCol_Separator]                = ImVec4(0.39f, 0.39f, 0.39f, 1.00f);
+    colors[ImGuiCol_SeparatorHovered]         = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);
+    colors[ImGuiCol_SeparatorActive]          = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
+    colors[ImGuiCol_ResizeGrip]            = ImVec4(1.00f, 1.00f, 1.00f, 0.00f);
+    colors[ImGuiCol_ResizeGripHovered]     = ImVec4(0.26f, 0.59f, 0.98f, 0.45f);
+    colors[ImGuiCol_ResizeGripActive]      = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);
+    colors[ImGuiCol_Tab]                   = ImVec4(0.69f, 0.69f, 0.69f, 1.00f);
+    colors[ImGuiCol_TabHovered]            = colors[ImGuiCol_ButtonHovered];
+    colors[ImGuiCol_TabActive]             = colors[ImGuiCol_ButtonActive];
+    colors[ImGuiCol_TabUnfocused]          = ImVec4(0.71f, 0.78f, 0.69f, 0.40f);
+    colors[ImGuiCol_TabUnfocusedActive]    = ImVec4(0.71f, 0.78f, 0.69f, 0.40f);;
+    colors[ImGuiCol_PlotLines]             = ImVec4(0.39f, 0.39f, 0.39f, 1.00f);
+    colors[ImGuiCol_PlotLinesHovered]      = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);
+    colors[ImGuiCol_PlotHistogram]         = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
+    colors[ImGuiCol_PlotHistogramHovered]  = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
+    colors[ImGuiCol_TextSelectedBg]        = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);
+    colors[ImGuiCol_ModalWindowDarkening]  = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
+
+    colors[ImGuiCol_DragDropTarget]         = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);
+    colors[ImGuiCol_NavHighlight]           = colors[ImGuiCol_HeaderHovered];
+    colors[ImGuiCol_NavWindowingHighlight]  = ImVec4(0.70f, 0.70f, 0.70f, 0.70f);
+}
+
+
+void ImGui::StyleColorsWindows(ImGuiStyle* dst)
+{
+    ImGuiStyle* style = &ImGui::GetStyle();
+
+    style->WindowRounding = 0.0f;
+    style->FrameRounding = 0.0f;
+
+    style->WindowBorderSize = 0.0f;
+    style->FrameBorderSize = 1.0f;
+    style->PopupBorderSize = 1.0f;
+
+    style->ScrollbarSize = 20.0f;
+    style->ScrollbarRounding = 0.0f;
+    style->GrabMinSize = 5.0f;
+    style->GrabRounding = 0.0f;
+
+    ImVec4 white = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
+    ImVec4 transparent = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
+    ImVec4 dark = ImVec4(0.00f, 0.00f, 0.00f, 0.20f);
+    ImVec4 darker = ImVec4(0.00f, 0.00f, 0.00f, 0.50f);
+
+    ImVec4 background = ImVec4(0.95f, 0.95f, 0.95f, 1.00f);
+    ImVec4 text = ImVec4(0.10f, 0.10f, 0.10f, 1.00f);
+    ImVec4 border = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
+    ImVec4 grab = ImVec4(0.69f, 0.69f, 0.69f, 1.00f);
+    ImVec4 header = ImVec4(0.86f, 0.86f, 0.86f, 1.00f);
+    ImVec4 active = ImVec4(0.00f, 0.47f, 0.84f, 1.00f);
+    ImVec4 hover = ImVec4(0.00f, 0.47f, 0.84f, 0.20f);
+
+    style->Colors[ImGuiCol_Text] = text;
+    style->Colors[ImGuiCol_WindowBg] = background;
+    style->Colors[ImGuiCol_ChildBg] = background;
+    style->Colors[ImGuiCol_PopupBg] = white;
+
+    style->Colors[ImGuiCol_Border] = border;
+    style->Colors[ImGuiCol_BorderShadow] = transparent;
+
+    style->Colors[ImGuiCol_Button] = header;
+    style->Colors[ImGuiCol_ButtonHovered] = hover;
+    style->Colors[ImGuiCol_ButtonActive] = active;
+
+    style->Colors[ImGuiCol_FrameBg] = white;
+    style->Colors[ImGuiCol_FrameBgHovered] = hover;
+    style->Colors[ImGuiCol_FrameBgActive] = active;
+
+    style->Colors[ImGuiCol_MenuBarBg] = header;
+    style->Colors[ImGuiCol_Header] = header;
+    style->Colors[ImGuiCol_HeaderHovered] = hover;
+    style->Colors[ImGuiCol_HeaderActive] = active;
+
+    style->Colors[ImGuiCol_CheckMark] = text;
+    style->Colors[ImGuiCol_SliderGrab] = grab;
+    style->Colors[ImGuiCol_SliderGrabActive] = darker;
+
+    style->Colors[ImGuiCol_ScrollbarBg] = header;
+    style->Colors[ImGuiCol_ScrollbarGrab] = grab;
+    style->Colors[ImGuiCol_ScrollbarGrabHovered] = dark;
+    style->Colors[ImGuiCol_ScrollbarGrabActive] = darker;
+}
diff -Naur old/imgui_themes.h new/imgui_themes.h
--- old/imgui_themes.h	1970-01-01 01:00:00.000000000 +0100
+++ new/imgui_themes.h	2019-08-12 08:49:06.000000000 +0200
@@ -0,0 +1,66 @@
+/* **************************************************************************************
+ *    Author: Eric Bachard
+ *    eric.bachard@free.fr
+ *    2018 december 30th
+ *
+ *                                  MIT License
+ *                                  -----------
+ *                               eric.bachard@free.fr
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ * **************************************************************************************/
+
+
+#ifndef IMGUI_THEMES_HPP
+#define IMGUI_THEMES_HPP
+
+#ifndef IMGUI_DEFINE_MATH_OPERATORS
+#define IMGUI_DEFINE_MATH_OPERATORS
+#endif
+
+#include <string>
+#include <iostream>
+#include <vector>
+#include "imgui.h"
+#include "imgui_internal.h"
+
+// Extra Math Helpers (Set the proper define below in imgui_internal.h)
+#ifdef IMGUI_DEFINE_MATH_OPERATORS
+//static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x+rhs.x, lhs.y+rhs.y, lhs.z+rhs.z, lhs.w+rhs.w); }
+//static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x*rhs.x, lhs.y*rhs.y, lhs.z*rhs.z, lhs.w*rhs.w); }
+static inline ImVec4 operator/(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(lhs.x/rhs.x, lhs.y/rhs.y, lhs.z/rhs.z, lhs.w/rhs.w); }
+
+static inline ImVec4& operator+=(ImVec4& lhs, const ImVec4& rhs)            { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; lhs.w += rhs.w; return lhs;}
+static inline ImVec4& operator-=(ImVec4& lhs, const ImVec4& rhs)            { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; lhs.w -= rhs.w; return lhs;}
+static inline ImVec4& operator*=(ImVec4& lhs, const ImVec4& rhs)            { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; lhs.w *= rhs.w; return lhs;}
+static inline ImVec4& operator/=(ImVec4& lhs, const ImVec4& rhs)            { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; lhs.w /= rhs.w; return lhs;}
+#endif
+
+namespace ImGui
+{
+    // New style inspired from Traditionnal Green (gtk+) on Linux + to be improved !
+    IMGUI_API void  StyleColorsLightGreen(ImGuiStyle* dst = NULL); // the default style in miniDart software
+
+    // New style inspired from Windows theme to be improved !
+    IMGUI_API void  StyleColorsWindows(ImGuiStyle* dst = NULL);
+
+
+} // namespace ImGui
+#endif //IMGUI_THEMES_H
diff -Naur old/imgui_widgets.cpp new/imgui_widgets.cpp
--- old/imgui_widgets.cpp	2019-08-12 08:47:19.000000000 +0200
+++ new/imgui_widgets.cpp	2019-08-12 09:50:24.000000000 +0200
@@ -2539,7 +2539,14 @@
     // Draw frame
     const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
     RenderNavHighlight(frame_bb, id);
-    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);
+
+    ImRect draw_bb = frame_bb;
+    if (g.Style.SliderThicknessScale != 0.0f)
+    {
+        float shrink_amount = (float)(int)((frame_bb.Max.y - frame_bb.Min.y) * 0.5f * g.Style.SliderThicknessScale);
+        draw_bb.Min.y += shrink_amount;
+        draw_bb.Max.y -= shrink_amount;
+    }
 
     // Slider behavior
     ImRect grab_bb;
@@ -2547,6 +2554,15 @@
     if (value_changed)
         MarkItemEdited(id);
 
+    ImVec2 middle(((grab_bb.Max.x + grab_bb.Min.x)/2.0f),((grab_bb.Max.y + grab_bb.Min.y)/2.0f));
+
+    // render left part
+    window->DrawList->AddRectFilled(draw_bb.Min, ImVec2(middle.x, draw_bb.Max.y), frame_col, g.Style.FrameRounding, ImDrawCornerFlags_Left);
+
+    // render right part
+    ImU32 frame_col_after = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg, 0.3f);
+    window->DrawList->AddRectFilled(ImVec2(middle.x, draw_bb.Min.y), draw_bb.Max, frame_col_after, g.Style.FrameRounding, ImDrawCornerFlags_Right);
+
     // Render grab
     if (grab_bb.Max.x > grab_bb.Min.x)
         window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);
@@ -2685,7 +2701,14 @@
     // Draw frame
     const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
     RenderNavHighlight(frame_bb, id);
-    RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, g.Style.FrameRounding);
+
+    ImRect draw_bb = frame_bb;
+    if (g.Style.SliderThicknessScale != 0.0f)
+    {
+        float shrink_amount = (float)(int)((frame_bb.Max.x - frame_bb.Min.x) * 0.5f * g.Style.SliderThicknessScale);
+        draw_bb.Min.x += shrink_amount;
+        draw_bb.Max.x -= shrink_amount;
+    }
 
     // Slider behavior
     ImRect grab_bb;
@@ -2693,6 +2716,14 @@
     if (value_changed)
         MarkItemEdited(id);
 
+    ImVec2 middle(((grab_bb.Max.x + grab_bb.Min.x)/2.0f),((grab_bb.Max.y + grab_bb.Min.y)/2.0f));
+    // render bottom part
+    window->DrawList->AddRectFilled(ImVec2(draw_bb.Min.x, middle.y), draw_bb.Max, frame_col, g.Style.FrameRounding, ImDrawCornerFlags_Bot);
+
+    // render top part
+    ImU32 frame_col_after = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg, 0.3f);
+    window->DrawList->AddRectFilled(draw_bb.Min, ImVec2(draw_bb.Max.x, middle.y), frame_col_after, g.Style.FrameRounding, ImDrawCornerFlags_Top);
+
     // Render grab
     if (grab_bb.Max.y > grab_bb.Min.y)
         window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);
