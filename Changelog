Changelog of miniDart
Copyright Eric Bachard 2016-2019  Software created the 1st AUGUST 2016

2019 August 5th

Fixed an issue with Play/Pause (b_audio_paused was not corectly set/reset)
Created new iconset for the canvas. 
Fixed license issues for the code already in the repository


2019 August 4th

Created new background. Simple, white and elegant.

TODO : improve the graphical chart

More factorization :
- improved application.h
- improved application::onEvent()
- improved application::loadFont()
- added application::initialize_recordableAudioSources()

Done : en-US localisation (98% done). Compilation is OK => en-US version will be released soon !
TODO : remains : match statistics ~ 50 strings)

0.9.5 RELEASED done // NOW GPL (no help, no contribution)

2019 August 3rd

Release time : be carefull, 0.9.5 is experimental, provided for TESTING purpose.
You are using it at your own risks, and must make a backup of your data before to test it.

Last changes : 

- testing empty rectangles and other canvas objects
- new layout 
- fixed Windows build (yet freetype issue :-/)


2019 July 31st

FIXME : decrease the height of the video, because using the full size does no longer display the annotations features
FIXME : once the annotation disappears, the rectangle, the outline and the baseline are not removed from the frame
        (the fix should consist in create a vector of objects, with arrays of points (vectors))

On Linux, the font list contains now :

const char* font_items[] = { "DroidSans"      , "Ubuntu-Regular", "Ubuntu-Bold", "Comic Sans",
                             "Comic Sans bold", "Arial"         , "Arial black", "Verdana"   ,
                             "Times New Roman", "Impact"
                           };

FIXED : the outline of the rectangle containing the font is drawn correctly now (green by default, but can be modified)
FIXED : the baseline of the text is drawn correctly (red by default, can be modified)
FIXED : the annotation duration now works. e.g. the inserted text remains 5s exactly, and is removed automaticaly
FIXED : included font selection in text_incrustation.cpp

DONE : Improved the layout :
- we can change the font alive (choose one in the list);
- we can change the fontsize, its position alive too;

DONE : Added annotation selection (radiobox)
- Possible choices are : insert a rectangle, insert a circle, insert a text, insert an arrow (does nothing yet)
- draw a text, select the font, the fontsize, the font color,
  + select automatic, or used defined position on the screen, draw a background or not below the string
- draw a rectangle filled / not filed  // does nothing yet
- draw a circle filled or not
- in all cases the user can :
- select the outline color of the object
- select the filled color of the object 

TODO :
- draw an arrow (bezier curve, with no background)
- add "undo" and "clear all" drawn objects
- add record the image as a video for a given time


2019 July 30th

Created fonts.hpp

Fixed :
- Freetype issue
- Windows fonts using C:\Windows\Fonts\ + one well known font.
Now, it should be possible to use one font throught the list below to annotate the videos :

On Windows :
const char* font_items[] = { "Arial"           , "Arial italique" , "Arial bold"        , "Arial black",
                             "Calibri"         , "Comic Sans MS"  , "Comic Sans MS bold", "Tahoma",
                             "Tahoma_Bold"     , "Times New Roman", "Verdana"           , "Verdana bold",
                             "Verdana italique", "Webdings"       , "Wingding" };
On Linux :
const char* font_items[] = { "DroidSans", "Roboto-Regular", "Roboto-Bold" };

(other fonts are possible and easy to add on Linux, as usual)


2019 July 28th

(partialy) solved the Windows issues : path must be absolute (relative = instant crash).
As expected, freetype is NOT able to find a font on Windows (excepted without some Microsoft bullshit (UTF-8 is not welcome).

Improved the layout.


2019 July 17th

Fixed:
- annotations. Draw a rectangle with the mouse
- annotations : record the rectangle 
- annotations : pause the video, add the text, then continue

Changed b_draw_recording to b_draw_recording_info


TODO : be able to drag the text ; select the color for the rectangle


2019 July 7th


For the record : text incrustation took me around one week (full time) of work. The code does never fall from the sky  ;-)

Reversed 2vin code at : https://framagit.org/ericb/direct_cv_encode 
+ filed the matching issue at : https://github.com/2vin/opencv-ffmpeg/issues/1

Important : everything below concerns 0.9.5. to come soon.
Last step before releasing 0.9.5 : verify the windows port works (no windows at home, this will take some time, since not much feedback)

Encode video : tested (works very well) direct ".mp4" encoding using C++ ffmpeg API. Adapted from : https://github.com/2vin/opencv-ffmpeg
DONE :  I'll reverse my changes under MIT license asap.

Video sequencing : This will not replace the OpenCV implementation (seems hungry in terms of cpu time), but this will allow to record 
as 10 s vid√©os started 5s before the "clic", and finishing 5s after ( 5s as example, but could be adjusted until -8s/+8s)

TODO : add audio stream, and mux them 
The idea : create a full video (images+sound) from any video source mixed with any audio source.

Added : audio multiplexer recordable audio sources can now be displayed, and selected (wait : it is not fonctionnal yet)
Tested with 3 webcams connected : one can select the sound origin, and (later) record this audio source

Incrustation in video work on windows too. Currently : 1 line only, 120 chars max.
Note : this is due to ImGui current limitation, with 127 chars maxi (I'll search a way to improve to 1024 chars

TODO ? allow to split in two lines x LINE_LENGTH_MAX characters (using a vector of lines, more precisely std::vector<std::string> lines).

"""""""""""""""""""""""""""""""""""""""""""""""
Additional comments about text incrustation :

I mostly reused the OpenCV documentation : https://docs.opencv.org/3.4.2/d9/dfa/classcv_1_1freetype_1_1FreeType2.html

I have to mention, the original idea comes from Philipp Hasper (https://hasper.info), who kindly
authorized me to reuse his code. In fact, I didn't use it, excepted the nice idea of vector of lines for multi lines implementation. To be more precise, I do not use
ioxp::puttext() at all. Indeed, after some tries, I ended using my own implementation with opencv 3.4.0 + freetype (under FTL license) 
+ harfbuzz (windows cross compilation was a nightmare), not Philipp Hasper version.

Anyway, I invite the reader to have a look a the complete original idea : https://hasper.info/worry-free-text-writing-into-opencv-images/

Last but not least, once the code will be published, everything will become clear ;-)
"""""""""""""""""""""""""""""""""""""""""""""""

Improved the Video incrustation UI : simplified, keep the text without delete it in the buffer, allowing to fix typos fastly.



2019 July 5th

First implementation of Incrustation in video is 90% implemented and quite stable.
Fixed all the string size issues. No more crash and cleaner code.
I wrote a better algo, who seems to be more optimized : we can now record videos
(as .avi, or .mkv or even .mp4)) in 1920x1080@ 24fps including incrustation !  (impatient to implement sound recording, means video + sound muxing)

TODO :
- Add a license file for Freetype (and contact the owner to be sure)
- select a number of characters, and following what is entered, the number of lines grows automaticaly

Important : will use freetyp under the FTL (means BSD like) license, to be compatible with miniDart (LGPL currently).


2019 July 4th

TODO : 

TASK A:
- try to replace the current recorder (actually OpenCV + ffmpeg) using directly ffmpeg, to create .mp4
- selet the sound channel // recordable sound
- mux both sound AND images into some .mp4 or .avi container.

TASK B:
- create an "incrustation factory"
- animate the text (simple OrigText(t) should do a lot 
+ add blurr effect to the font (probably making lineStyle (t)
+ add colored text effects

=> howto generate complex incrusted objects (like pannel in a match ?)

The proof of concept works !!!

- init works well
- redo is possible (add one, add another incrustation)
- stop incrustation manyally works

FIXME :
- problem with long strings, and wrap_text_in_lines, who is very hacky, and needs some love  (WIP)

- the size of the rectangle depends on the image size, and  "normal font appearance"
  occur when the following fontsizes :

  ~ size = 36 with 1920 x 1080 images (aka 2k)     // 1920/36 = 53.33 pixels per character
  ~ size = 24 with 1280 x  720 images (aka 720p)   // 1280/24 = 53.33 pixels per character
  ~ size =  6 for  320 x  240 images( rtsp video)  //  320/6 = 53.33 pixels per character too !

Means it could be intersting to keep the ratio  (witdh/fontsize) = constant = 53.33 
Current (simple) choice: allow to select the fontsize between 6 and 80, to allow a max of cases.


2019 July 2nd

Linux: matroska (aka .mkv) format is now in the list when opening a video. ffmpeg is fantastic ! 8-)

CanvasText class completed. Tests in progress
Linux:  everything builds and works fine since the beginning.

Windows cross-compilation (one more time) : after everal hours of fight with (the order is essential) freetype6, harfbuzz
and OpenCV, I finaly was able to end complete the windows build. 
The problem *were* :
- find a buildable version of libfreetype6 (means : cross compilation works as expected, what is not true)
- build harfbuzz. Difficult, scripts never work. Is it expected to avoid the devs cross-compiling it ?
- cross compile BOTH freetype6 AND harfbuzz (broken build, nothing works well, I had to hack a lot) 
- last, but not least:  1. detect both libfreetype6 AND harfbuzz when cross-compiling OpenCV 3.4.0 //(the CMakefile.txt is completely wrong and broken)
                        2. compile miniDart  // subtile issue at the end, but I understood what happened, and it is now fixed.

Result : it seems to work on Windows (ufff !!)


2019 July 1st

Full implementation and Tests in progress (recording will be added later)
Implemented Text_Canvas class
Implemented TEXT_Object structure
Testing std::vector of md::TEXT_Object use
Added stopStringIncrustation() and clearString() methods

Shortcut modification :  close a video
Dues to text incrustation in videos, changed  " q" for "prefered modifier" + "q"  (default prefered modifier is ALT key). TODO : improve


2019 June 30th

Implemented wrap_text_in_lines( char * text) : one original line (text entered without take care), is split into lines of a given size.
Max allowed is two lines x ~ 60 characters.

What works correcly :

In miniDart, one can check uncheck "insert a text in the video".

When checked, we can select what to be drawn : 
- select the fontsize
- decide to fill the frame using a given color
- select "add a colored frame"
- select "add an outline"

Enter the text (right clic to write a new content
Insert the text (definitely) in the video, for a given while
Reset the text (empty the string)

When clicking on the advanced parmaters button, a contextual menu appears.

The following parameters are modifiable :
- choose how long the text will appear in the video
- select the fontsize
- select all the colors : font, frame, outline
- reset to default values

To be added : move x / y position of the box origin (here, the top left point)

In the proof of concept (openCV + freetype) only

using a fixed string, a given max line size, after some tests, it appear to work.

Two cases :
- when the string is less than 58 characters one line only is drawn on top of the OpenCV window.
  - we can move the incrusted text rectangle position, with sliders (OpenCV highgui)
  - the accented chars and most o the current UTF-8 chars are ok
- when the string is more than 58 characters : 2 lines are calculated.

TODO : draw both lines

Issues : some little glitches with UTF-8. When the first word of the second line contains accented chars, the result is not always what is expected.

TODO : check what happens on Windows too (accented chars give strange results sometimes). Probably a wchar implementation will be needed.




2019 June 28th

Annotations :

After discussions with Julien Antoine (SAHB), I'll try to annnotate one delayed video _alive_ (task #1) or add comments in an image, and write a
static video for a given time (e.g. 5 to 10 s), and include it later in the final vid√©o, at mount time (task #2).

Implemented solution 1 : Implemented addText( cv::Mat img), using cv::freetype::FreeType2 Class Reference.
Link : https://docs.opencv.org/3.4.2/d9/dfa/classcv_1_1freetype_1_1FreeType2.html 
The goal is to include text annotations in the current displayed image (wherever it comes : Video, USB ...)

Implemented solution 2: tested image_ostream hack, from OpenCV issue #313
Link : https://github.com/opencv/opencv/pull/313/commits/a546d1ffcbd69902cc99b04ad94bc24065e2b184

Tested :
Cross compiled a new version of OpenCV (Windows AND Linux). Works as expected. Solution 1 is more promising, since we can
use whatever .ttf file (tested using Verdana.ttf, Comic_Sans_MS.ttf, DroidSans.ttf, DejaVuSans.ttf, Arial.ttf and some other).


REMAINING ISSUES TO BE SOLVED :
- how to detect \n in a given string ? 
- how to write several lines (like ImGui::MultilineText() does (very well btw)

WIP : created the associated documentation (french). Will commit the file once I'll have decided what do at the end.

2019 June 11th

Idea : integrate the webcamimage (resized), inside a video.

2019 May 31st

After a request (by email), Romain Vimont gracefully modified delay license for MIT. WOW ! 
It means delay can directly be integrated inside miniDart. This could be extremely helpfull !
TODO : implement sequencing feature : recording 5s before the clic + 5s after (frames + sound should be possible)

Mix ImGui OpenGL contexts and SDL_Renderer definitely don't work (obvious on Windows) => removed



2019 May 8th

More code cleanup
Removed yet other ugly hacks with seek function : removed the SDL_Delay(50) when using the seek grabber, and some useless unref()
Simplified the player : removed uggly hacks based on SDL_Delay(n), causing randm crashes when using separated threads
Fixed some crashes with the seeking function.
Removed useless av_packet_unref() causing segmentation fault at the end of the video.
Worked at speed measure: looks like we can display the ball speed (approximativaly) ! (WIP : use grey + background syubstraction)
Tested v4l2loopback (will probably become something close to /dev/video10)


2019 May 1st

SDL2 renderer + OpenGL 3+ + ImGui work ! (tested on Linux only, using 0.5.0 version of miniDart)

If confirmed, this is an enormous improvement, because it will divide the load with videos by 2 or 3, and will help a lot for annotations.

DONE : reimplemented the SDL_renderer // testing vsync / not vsync.
The code compiles and works on Linux. No break on Windows, but needs a lot of tests.


2019 April 26th

(Linux only)
Upgraded Mesa to 19.1.0-devel version (git-e8bf4efceb)
Upgraded GStreamer to 1.17.0
Upgraded ffmpeg to 4.1.0
Testing Vulkan 1.1.106
Rebuilt OpenCV 3.4.0 

Created AudioDevice and AudioDevicesVector classes. Will use SDL2. added the header in the miniDart repo


Compiles directly (Windows Linux)
Fixed several issues with clock and end of playback


2019 April 21st

Added cv::CAP_GSTREAMER in improve me list (capturedev.cpp)

Implement me : add a chronometer + buttons linked to time.
Rule : a player is on the playground (means button enlighted) => increment activity time,
       not present (means button not enlighted)) : activity time is stalled
Pro : it's easy to see all the 7 players present. 

Second idea : add a timeline to see all the players rotations during the full match ? (shouldn't be too complicated)


2019 March 1st

s/1440x1080/1440x900/ in the proposed images formats

2019 February 24th

Distortion:  got a solution, but will implement it later
See: https://github.com/ebachard/distortion + the corresponding PR (build fixes + warning free + code cleanup)

Layout : found https://edu.gcfglobal.org/en/beginning-graphic-design/

VSYNC : found how to disable vsync on Linux : 
1. create  ~/.drirc file
2. add:
<device screen="0" driver="dri2">
    <application name="Default">
    <option name="vblank_mode" value="0"/>
    </application>
</device>

3. set SCREEN_FPS to 2000 + rebuild miniDart

cold launch: 980 fps / 1.0x ms/frame
slidershow + small big buck bunny (2k@60fps), with 1360 x 768 @ fullscreen gives 120 fps
delay, fullscren, running a 720p video gives 150 to 180 fps
rtsp flow (320p@24fps), fullscreen gives 450 to 480 fps

4. Normal use : SCREEN_FPS value is currently set to 100 fps on both Linux and Windows.


GLSL : solved the glsl #version 130 only on Linux  (was searching since a lot of time !!!)
See : https://github.com/ocornut/imgui/issues/1116
Fixed the imgui-mix-sdl2 issue the same way :
const char* env_var = "MESA_GL_VERSION_OVERRIDE=4.x";
putenv((char*)env_var);
=> allows glsl #version 4.x (including 4.5).

Regression : cannot play the (correctly) recorded videos (bcause missing audio channel ?)


2019 February 19th

Added 1360 x 768 image format


2019 February 5th

0.9.4 RELEASE IN PROGRESS (bcause more test on Windows are needed)

Limited the frames number to 500 with the clipReader (more only with commercial version)
Using reorderable tabs. Todo : make them dockable and closable asap (see docking branch)
Using viewports ! Be carefull : some remaining bugs, like image no longer
rendered when a window overlaps the main window border, and some related issues.
Removed useless recursive menu (mostly confusing for end users)
Removed broken ImGui::Columns()
Worked at the layout (currently suboptimal)
Added new tabs (list of players) in follow up tab, with 12 players (test)

2019 February 4th

Testing new, and based on frames only VideoSeeking class
Improved stability (some other crashes are fixed)
Added new preferences : Ratio.
New values are 16/9 (current 720p), 16/10 (macbook pro format), 4/3 and 4/5 width/height formats
Added seek fast forward (+10s) / seek fast backward (-10s)
Now using (+2s) for step forward, and -2s for step backward
Fixed : seek fast backward, seek step backward, play / pause / stop / seek step forward, seek fast forward
Fixed : time position can now be set manualy.
Fixed : flickering when setting time position manualy
Fixed : (workaround) dead lock when the video arrives at the end
Fixed : return to zero (stop)

REGRESSION (WIP, partialy fixed using origin / max_position values) :
some .mp4, (some .MTS and flash videos) do NO LONGER return the right value from get_audio_clock( videostate)
nor get_master_clock(videostate).
Testing master clock


2019 January 21st

Continued to work at the new control (box appears when the mouse curser hovers the video frame).
The howerAction class is in a good shape, means ~ 70% done.
Added new variable names video_duration. Now the slider wshows the current position in the video file (timeline).
FIXME : manually change the slider grabber + add a modal dialog box to enter a given time to seek at.
Added .webm video files
Some improvements with seeking backward/forward. 10s seems to be more realistic.
NEW: worked at full follow up for players. Added some new ideas in the whit paper.
Fixed more crashes.
Learning libopenshot. Problem though : looks very well written, but this lib (LGPL) seems to be cribbled by Qt dependencies ...  :(
WIP : trying to rewrite the ClipReader, without fill the memory with frames.


2019 January 10th

Fixed the wrong layout with the new tabs API + Viewport on Linux
Fixed the visibility of some static variables.


2019 January 5th

Fixed the do_seek bug : now we can bo backward / forward.
FIXME:  needs a lot of improvements though
Tested SliderThicknessScale with devel version, including colors.
SliderThicknessScale = 0.4f + transparency = 0.3f looks nice (tested in all versions)
Fixed bad use of ImGui::BeginGroup()/ImGui::EndGroup() in ANALYSIS_TAB. Looks ok now.
Created slidershrink branch
Proposed a contribution to Dear ImGui : see https://github.com/ocornut/imgui/issues/2263

2019 January 3rd

Fixed another instant crash and some annoying issues with video ending.
Disabled the broken FF_QUIT_EVENT, replaced by something else. FIXME : factorize the "quit" action
Now the video does no longer quit at end, but stops at the last image.
Improved engine GL Context visibility issue with multi viewports (devel version only).
 - no engine: works as expected, remains only one issue
 - engin : yet some broken contexts, and lost adresses 
Fixed theme selection issue.
Implemented set_theme() (will likely become Gui::set_theme()).

2019 January 1st

DEVEL branch

Implemented Omar Cornut Multi Viewports : works well !!
Link explaining everything : https://github.com/ocornut/imgui/issues/1542

Most important issue was caused by missing ImGui window origin. 

More precisely, I had to add, just after window flags declaration :

````
    // kept to illustrate the example

        static bool open = true;
        ImGuiWindowFlags mD_window_flags = 0;

        // for testing purpose : will be simplified soon
        static bool no_titlebar = true;
        static bool no_resize = true;
        static bool no_move = false;
        static bool no_scrollbar = false;
        static bool no_collapse = true;
        static bool menu = false;

        if (no_titlebar)  mD_window_flags |= ImGuiWindowFlags_NoTitleBar;
        if (no_resize)    mD_window_flags |= ImGuiWindowFlags_NoResize;
        if (no_move)      mD_window_flags |= ImGuiWindowFlags_NoMove;
        if (no_scrollbar) mD_window_flags |= ImGuiWindowFlags_NoScrollbar;
        if (no_collapse)  mD_window_flags |= ImGuiWindowFlags_NoCollapse;
        if (menu)         mD_window_flags |= ImGuiWindowFlags_MenuBar;

        // some geometry. 24.0f seems to be the height of the main menubar
        ImVec2 windowSize(ImGui::GetIO().DisplaySize.x, ImGui::GetIO().DisplaySize.y - 24.0f);
        ImGui::SetNextWindowSize(windowSize);

        // Without the two lines below, we can obtain 2 windows :
        // -  one sort of ghost window (no move, no borders ..., located under the main one,
        // -  one main window receiving no events ...

        ImVec2 main_viewport_pos = ImGui::GetMainViewport()->Pos;
        // after we reduced the window size, we translate it from the same value
        // Last : check whether the position is really 0,24 for this window in imgui.ini
        ImGui::SetNextWindowPos(ImVec2(main_viewport_pos.x,main_viewport_pos.y + 24.0f));

        if (ImGui::Begin(APPLICATION_VERSION_STRING, &open, mD_window_flags))
        {


    ImVec2 main_viewport_pos = ImGui::GetMainViewport()->Pos;
    ImGui::SetNextWindowPos(ImVec2(main_viewport_pos.x,main_viewport_pos.y));
````

THANKS AGAIN to Omar Cornut for his great instructions and documentation in the code !

Drawback : to make it work, I had to reuse the old SDL Engine, due to a guilty encapsulation,
causing trouble with multi-viewports).
To be continued : using the previous version helped to make it work as excepted,
and I'm currently back to Engine class use (still remains one issue, see below).


FIXME :
- changing the lense window size outside of the main SDL window, avoids to refresh the displayed frame (maybe I need a special event ?)
- clash with some shortcuts (Navigation keyboard is very interesting in the User Experience, but asks to use other shortcuts)
- TODO : rewrite the events engine
- yet one issue with Engine : the outside window seems to lose its context (another visibility issue probably)

Fixed : main menubar now appears (some other issues appear, but I'm not far)
Fixed (all versions) : instant crash with Delay checkbox when no USB webcam available.
Fixed (Devel version, including multi-viewports) : missing colors for tabs (LithGreen and Windows mostly)
Fixed (Devel version, including multi-viewports) : Dark theme is too dark !! (changed for the classic one, more funky)


2018 December 30th

Modified the BeginTabbar() signature, to comply with the recent ImGui one.
Tests in progress: new ViewPorts + new tabs.

TODO : move LightGreen and Windows Themes elsewhere (something like imgui_themes.cpp ?)

WOW !! the viewports feature allows to take a tab, put it outside, including on an external screen 8-)

Since the API has been modified (bool instead of void), everything is ready,
only remains the BeginTabbar() // EndTabbar() to be added. Will do tomorrow.

Intensive tests on Windows. No more crash, but waiting for further fedback from testers.
Some remaining crashes on Linux though, caused by (already fixed) double free.
The crash root was SDL_ReadThread() called twice, since do_exit was called twice (FIXED).

TODO : since the new TABS support PushID() / PopID(), I can comtinue the team follow up implementation.

2018 December 28th

Issue : improved the thread issue. A delay was needed between SDL_WaitThread(is->tid, NULL) sent 
and the time starting to destroy frames and audio queues.
FIXME : remaining case causing a dead lock is obtained when the frame do not load correctly. Investigate.

Improved the UI : select a new image source is now more consistent
Added a modal popup window to select the image source
FIXME : maybe choose the image source in two different places is not a good idea ?
Reordered the UI for all available cases.
Activate the webcam is disabled by default.
The good is,  miniDart can start with the webcam not being connected (not advised though, but users will often do that)
Implemented :
  CaptureDev::md_delay (int, private)
  CaptureDev::set_delay(int)
  CaptureDev::get_delay()
  b_never_initialized_webcam

2018 December 26th

More code encapsulation. Now using:
- captureDev.cpp (continued the decouple webcam from main loop)
- engine.cpp  (continued the classes implementation, code cleanup)

Fixed most of the engine.cpp issues
Worked at the fps. Got something, but not working well (giving random results when recording)
Fixed SDL_GL_GetDrawable() issue with ImGui on Linux when using the new SDL engine
Cleanup in captureDev.hpp
Added CaptureDev::canReadFRame()
Improved application.hpp (added lot of new class members)
Changed resetCaptureDev() into resetImageSource() more generic
Tested some new format records.
Started : learning how to stream h264

Removed loadPlayerIcons() and everything related // kept as code history


2018 December 20th

Code cleanup
Improved slow motion layout
Fixed several issues :
- open clip / closes clip
- static / non static current_time / old_time

2018 December 19th

Improved statistics + implemented all cases + testing new colors
Created statistics.cpp
Implemented new slow motion algorithm : works well from 5 fps to ~ 50 fps.
IMPROVE ME : vsync is causing trouble (limited to 60 fps on Linux)
IMPROVE ME : the layout needs some love
Should work as expected on Windows (~ 700 fps easely on an average machine)


2018 December 18th

Worked at the Team follow up.

Improved the layout :
- buttons resized (all have same size now) ;
- improved spacing (was mostly wrong layout issue) ;
- improved text (all texts centered now)
- testing uppercase for actions
- added new cases : goal as 7m or not, goal against marked as 7m or not
- added new cases : attacks entries
Improved statistics.hpp (added some new cases)

Added new menu entry, to select the images source.
Removed the old (not very UI appealing) select source popup menu.
Implemented Attack events. Works well


2018 December 15th

Fixed two annoying instant crashes:
- wrong alignment in swrescale convertion
- looks like SDL2 2.0.9 does not work that well with alsa: back to pulse on Linux (release) and alsa (dev)
- improved the loop time: now, got stable 60 FPS watching any source

FIXME: recording is causing a 57-59 fps instead of expected 60 fps;
There is maybe a need to improve the recording loop ?

Received an answer about opengYUV source code licensing.
See: https://github.com/43437/opengYUV/issues/1  

"
43437 commented 17 days ago
sorry, i don't think about licenses, in this demo i use opengl,
if opengl or something i use does have license,
then my demo must obey,
if that does not have license, my demo's license will be WTFPL license.
"
=> I will use it under LGPL first, and MIT later


2018 December 12th

Found how to enable audio recording with SDL_Audio (SDL2)
Will probably use alsa on Linux and DirectSound on Windows
FIXME : continue to work at solve the issue with pts, to record both sound and video.

2018 December 11th

Worked with Nicolas on a new feature :
- create a 4 or 5 s of video+sound queue, and add a button to record the video+ sound flow by 5 to 10s sequences
(a priori no need to use that with webcam or any delayed stream)

Discovered https://github.com/rambodrahmani/ffmpeg-video-player (learning ffmpeg)
Started trainer Team follow up implementation : goal started to work. to be continued
Added avformat_network_deinit() in do_exit()


2018 December 6th

Added bootstrap mechanism to retrieve resources  (FIXME : complete me)

Now using SDL2.0.9 on both Windows and Linux.

(Linux log says): 
"We compiled against SDL version 2.0.9 ...
And we are linking against SDL version 2.0.9.
OpenGL version: 4.5 (Core Profile) Mesa 18.2.1
GLSL version: 4.50
Vendor: Intel Open Source Technology Center
Renderer: Mesa DRI Intel(R) UHD Graphics 620 (Kabylake GT2) 
Audio device 0: Audio interne St√©r√©o analogique
Audio subsystem initialized; driver = pulseaudio.
Zoom actuel : 1"


2018 December 5th

Reversed the changes to the hansonLGE initial project (under LGPL v2.1)
Fixed a stupid typo s/window2/window/ probably causing chaotic crashes or threads issues


2018 December 4th

Improved Cell Phone UI
Improved IP Webcam UI
Fixed two annoying crashes caused by wrong string sizes
Limited IP webcam string size at 512 bytes
Limited rtsp string size at 512 bytes
FIXME : fast backward and fast forward do not work as expected

2018 December 3rd

Lot of code cleanup
Rewritten the acquisition engine.
More encapsulation, cleaner and more simple
More code factorization
Implemented new source : cell phone
Feature : cell phone images can be delayed, like the images coming from the webcam
FIXME : test using Droidcam
Fixed some bugs when recording with images rotated
Implemented seek (fast backward # stop #  play/pause # fast forward)


2018 December 1st

RELEASE :  0.8.8

Improvement   :
- we can now change image orientation for every source ( can be funny sometimes :-) )
- we must close the current video before to load a new one (video open is active only when no video is loaded)
- video close is only active when b_video_running == true
Fixed (crash) : clicking close the video an exact while before the end of watching it caused crash (thread issue, probably the same as the one in SDL_ktchensink).
Fixed (crash) : disable "open a video" when one was currently displayed.


RELEASE :  0.8.7 

Video + sound work on Windows (7+) and on Linux
can use rtsp flow as input, and save the images
Possible crash during a little while afterthe playback stops. 2 seonds after, no more crash (probably some unfinished thread issue)

2018 November 30th

More SDL2 sound fixes (https://trac.ffmpeg.org/ticket/6721) but no effect
Remaped SDL2 AV_PIX_FMT_* to better SDL_PIXELFORMAT*. 

Added :
- SDL_PIXELFORMAT_YV12
- SDL_PIXELFORMAT_NV12
- SDL_PIXELFORMAT_NV21
- default is : SDL_PIXELFORMAT_RGBA32

Still searching WHAT happens on Windows (only ...)

FIXME :
- strange flip issue on Windows with recorded images. Bizarre ...
- looks like the REC and the TIME follow the image orientations (why no problem on Linux ?)

2018 November 29th

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Can watch BigBuckBunny on Windows, but no sound.

FIXME : main problem on Windows seems to be the sound :

The log says : 

[audio]could not open audio, error:DirectSound CreateSoundBuffer: Invalid Parameter
audio open failed
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Back to dark theme as default

Rebuilt cross compiled ffmpeg with -enable-win32threads option 

Fixed (Windows) : fixed all crashes when closing any source (Video / IP webcam)
Fixed (Windows) : can open / re-open any source
Fixed : can record everything (Webcam or IP webcam or from video including time)
Fixed : can record time with rotated images
Fixed : can now record rotated images (only 180¬∞ +- horizontal flip works)
TODO : how to record 90¬∞ rotated images with or without flip ? (width / height swap seems to not work with OpenCV recorder ?)

2018 November 28th

Fixed (Windows) utf8 char16 issue on Windows. use av_strdup() did the trick.
Fixed (Windows)close the video / close the rtsp stream
Fixed event issue in the main loop. Replaced by b_video_running(false) followed by do_exit()

WIP : figure out what exactly cause the instant crash on Windows

Possible track : rebuild ffmpeg with pthread enabled

LOG says (running wine64 miniDart.exe on Linux) :
read_thread *is->filename  = rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov
b_video_running = 1 (currently in video_init) 
[udp @ 000000000a70d280] 'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)
[udp @ 000000000ab8a4c0] 'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)
[udp @ 0000000008fb2e00] 'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)
[udp @ 000000000c2893c0] 'circular_buffer_size' option was set but it is not supported on this build (pthread support is required)
Input #0, rtsp, from 'rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov':
  Metadata:
    title           : BigBuckBunny_115k.mov
  Duration: 00:09:56.48, start: 0.000000, bitrate: N/A
    Stream #0:0: Audio: aac (LC), 12000 Hz, stereo, fltp
    Stream #0:1: Video: h264 (Constrained Baseline), yuv420p(progressive), 240x160, 24 fps, 24 tbr, 90k tbn, 48 tbc
is->video->stream = 1
is->video->st = 0x8dfc780
is->video->avctx = 0xd322a80
video thread
SDL_CreateThread(video_thread, "video_thread", is) done 1
audio open done
packet_queue_start(&is->audioq) = 0
packet_queue_start(&is->audioq) = 0x8df9500
packet_queue_start(&is->audioq) = 0xd3ab8c0
packet_queue_start(&is->audioq) done 
SDL_PauseAudio(0) done

Current status :
- everything works very well on Linux, but no way to watch a video on Windows
- wine64 : everything works on the video playback and on the rstp side : open / close, record a video
- wine64 miniDart.exe works as expected with the webcam
- filenames are now correct (avformat_open_input() works ok everywhere now)
- we can open an .avi on Windows, but works only when no sound (thread issue ?)

2018 November 27th

Improved the UI behaviour, when changing the source (USB webcam / IP_WEBCAM or FULL_VIDEO)
Fixed one crash when clicking on close the connexion twice
Improved resetCaptureDev feature, simplified too.


2018 November 26th

Fixed: 
- implemented avframe_to_cvMat (using nearly the same code I wrote in SDL_Kitechensink and sdl2_ffmpeg)
- no more renderer needed: got everything in the frame
- removed all SDL code (texture, and so on)
- synchronisation is OK. Remains : the refresh issue
- video, IP webcam, can be open. Images and sound work
- they can be closed them, redo, and so on without any issue
- more cleanup (removed 30% in ffmpeg_player code already)
- included the new case (IP webcam case) in the loop, and it works well.
- simplified the code (removed some recursive and useless calls
- extracted some static values

FIXME : Due to the strange video pictures queue, without event, the video is not refreshed.
Currently studying dranger code to understand what happens, and hw to solve (or workaround) that.

2018 November 21st

Fixed : s/buf_flux_reseau/flux_reseau/ to provide correct filename to LoadFile() when using IP_WEBCAM
Fixed : can now watch rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov
TODO : test other IP flow cases.

Dreaming : would be great to catch a movie frome some smartphone !


2018 November 20th

More code cleanup :
- removed useless includes
- improved the layout
- immproved the UI

2018 November 19th

Testing extern SDL_Window *, SDL_Renderer * , AVPacket ( and threads ? )

More encapsulation with restartCaptureDev initialization.

Fixed the rtsp flow "paused" by default
Improved the event loop : now the video can e displayed at normal speed.
Just something wrong when the mouse cursor is catched: slow down when hovering,
and normal spee when outside of the window ..

Testing the ffmpeg player. Lot of threads issues.

WORKAROUND : currently using the renderer + window2 : this will disappear, 
once I'll be abl to catch the frames as expected and turn them onto cv::Mat

FIXME : open an RTSP flow works, but nothing appears, and playback ends (???)


What works : 
- open a video, play, quit
- close the video
- return use the webcam, record, and so on

What is broken :
- open a second video : no video, but sound works (uhh ?)
- open rtsp flow : playback ends, means no video or audio issue at the beginning
- do_exit is probably plain wrong : close twice cause instant crashes, but do exit works well (threads issues ?)


2018 November 15th

Fixed a const issue with SDL_Event * 

Replaced Image rotation checkbox, with a modal PopupMenu.
More encaspulation : fixed more static issues.


Added Image rotations, by step of 90¬∞.(other values not needed)

+----------+----------------------+-----------------+---------------+---------------|
| Property |   range/values       |     Webcam      |     Linux     |   Windows 7+  |
+----------+----------------------+-----------------+---------------+---------------|
|          |  no rotation         |    DEFAULT      |  DEFAULT      |   DEFAULT     |
|          |----------------------+-----------------+---------------+---------------|
|  Image   |  90¬∞ clockwise       |   All webcams   |  works well   |   works well  |
| Rotation |----------------------+-----------------+---------------+---------------|
|          |  180¬∞(V flip)        |   All webcams   |  works well   |   works well  |
|          |----------------------+-----------------+---------------+---------------|
|          | horizontal flip      |   All webcams   |  works well   |   works well  |
+----------+----------------------+-----------------+---------------+---------------+
|          | 90¬∞ counterclockwise |   All webcams   |  works well   |   works well  |
+----------+----------------------+-----------------+---------------+---------------+

TODO LATER (maybe)

-> resize the image when +-90¬∞ rotations (ratio + divide the window size)
+----------+-----------------+-----------------+---------------+---------------|
|  Gain    |   untested      |                 |               |               |
+----------+-----------------+-----------------+---------------+---------------|


2018 November 14th

Added new properties (tested on Linux only):
- autofocus or manual focus : Logitech C920, C922, C960 (BRIO) works. Lifecam C3000 does not.
- exposure : works but buggy : we can change, and set from 0 to max BUT no way to retrieve AUTO EXPOSURE mode
(searching why...)

Rewrote the full algorithm for both focus and exposure.
Windows test : Zoom works well, but not Pan / Tilt. Will check asap.
Both focus auto or manual and exposure work on Windows (two possiblities)

All the currently working (or not) webcam images properties are summarized below :

+----------+-----------------+-----------------+---------------+---------------|
| Property |   range/values  |     Webcam      |     Linux     |   Windows 7+  |
|----------+-----------------+-----------------+---------------+---------------|
|          |   1.0 to 5.0    | Logitech Brio   |   Works well  |  works well   |
|  Zoom    |   1.0 to 2.0    | Logitech C920   |   Works well  |  works well   |
|          |   1.0 to 2.0    | Logitech C922   |   Works well  |  works well   |
+----------+-----------------+-----------------+---------------+---------------|
|   Pan    | +- right / left | Brio, C922, C920|   Works well  | doesn't work  |
+----------+-----------------+-----------------+---------------+---------------|
|   Tilt   | +-top / bottom  | Brio, C922, C920|   Works well  | doesn't work  |
+----------+-----------------+-----------------+---------------+---------------|
| Focus    |  manual / auto  |   All logitech  |   Works well  |   untested    |
+----------+-----------------+-----------------+---------------+---------------|
|          |  Auto to Manual |  All Logitech   |   all ranges  |   untested    |
| Exposure |-----------------+-----------------+---------------+---------------|
|          |  Manual to Auto |  All Logitech   | does not work |   untested    |
+----------+-----------------+-----------------+---------------+---------------|

TODO LATER (maybe)
+----------+-----------------+-----------------+---------------+---------------|
|  Gain    |   untested      |                 |               |               |
+----------+-----------------+-----------------+---------------+---------------|


Fixed some strange issues caused static / extern variables.
Tested a nice FFmpeg_player opening ~ all the videos I had around, including IP webcam or rtsp flow.
Remain the SDL2 and YUV+renderer issue.


2018 November 12th

Testing FFmpeg_player : works well with ALL sorts of videos, including rtsp + sound. Licence LGPL.
Counterpart: LGPL only, and needs some love for integration inside miniDart.
ISSUE : on Windows, Tilt and Pan do no work, but Zoom does.
Started some tries, with other steps and values.
The (unprecise) Microsoft docuentation says "-180¬∞ to 180¬∞", but nobody knows in fact ...


2018 November 5th

Replaced the videoplayer class with inline videoplayer, to see what was wrong :
- video_init()
- video_run()
- video_close(√†

Got video opening, closing and working (using space key to play/pause, as expected)
Fixed several craches (empty cv::mat, null pointers like src and player oince closed the video).

We can record the watched video. Delay is not an option (non sense for played video)

FIXME :

- add more buttons (play / pause). TODO later :fast forward / fast backward / one frame forward / one frme backward)
- videos recorded from videos are half the speed the original vid√©o ??
- NO SOUND (causing instant crashes for the moment )
- Only .avi ca be open. Not the other vid√©os, nor sound ???

Possible tracks :
- check whether the cv::Mat formats are the same with other videos ?
- trace the sound part, who seems to be not working maybe ?

More improvements :
- the video is now automatically closed when finished.
- fixed the crash when closing several times the video
- image is now paused only for (broken) IP webcam use

Load an entire song (~3'30" e.g.) needs around ~ 15GB or RAM, but works very well with the ClipReader.
Remember : time in seconds * width * height * 3 * fps  is needed in GB !
(count 64 GB of RAM, for 13min of rush for 720p@24fps)

TODO
- fullscreen mode. 2 possible cases :
  case 1 : SELECTED TABS are delay, analysis : fullscreen or windowed mode are possible ;
  case 2 : SELECTED TABS are stats, GK follow up, help, credits : only windowed mode is possible.


2018 November 4th

Added _THEME to all color themes (BLUE_LIGHT_THEME, WINDOWS_THEME, DARK_THEME, LIGHTGREEN_THEME, CLASSIC_THEME)
Now using WINDOWS_THEME as default

Fixed the source issue : 3 choice are possibles, only one works well for the moment.



2018 November 3rd

More code factorization:

frame.release() is now *outside* of gui loop ( YES ! )
- added displayed_frame, as clone of capture or current video (default is empty_frame, just in case something goes wrong).

Now implementing : frame_displayed = frame.clone(), to dissociate the capture from the view
  => main loop and capture loop are now decoupled ! Expected : stable 60 fps in the view

  main loop will use : displayed_frame
  displayed frame is a clone of EITHER webcam_image, with or without delay (or empty image if capture fails) ;
                                OR video frame (or empty image (if video fails).


Started working at the new main loop : expected 60 fps (depends on the machine).
The capture loop will depend on the fps value (defined in the GUI, 24 fps by default)

Gui : fixed clean all shoots only when number of shoots > 0

Localization: added new strings OPEN_A_CLIP_BUTTON, CLOSE_THE_CLIP_BUTTON. Added french and english strings.
Changed VideoReader in ClipReader classe, more accurate.

VideoReader will be reserved to read a true video, including sound.

Renamed videoreader.cpp and videoreader.hpp into clipreader.cpp and clipreader.hpp

Implemented VideoPlayer class, using SDL2_ffmpeg.

API : LoadFile((char *) filename) becomes LoadFile((char *) filename, int video_type). video_type is VIDEO_CLIP or VIDEO_FILE

2018 November 1st

More code factorization:
- worked at Gui class (gui.cpp) : added clean_and_close, ~Gui()
- improved gui.hpp
- improved engine.cpp
- improved engine.hpp

Improved the Makefile :
- added real_clean rule
- fixed Windows and Linux cleanup separately

Renamed Tools:: class FileTools:: class
Implemented FileTools class


2018 Ooctber 30th

Added SDL2_ffmpeg code in miniDart
Fixed all the cross compilations issues
Improved the second version of simple_OpenCV using YUV -> BGR -> cv::Mat
Ready for testing reading a video in miniDart.
Improved the Makefile


2018 October 29th

Implemented a 5th theme, based on Windows 10 UI.

Now, 5 themes are fully selectable in miniDart :
- LightGreen
- Dark
- LightBlue
- Classic
- Windows

2018 October 28th

Upgraded Dear ImGui to 2018-10-28 version 1.66 WIP
Fixed the UI for the "advanced recording parameters" dialog box :
  - removed duplicated entry, added FLV1
  - fixed the wrong ImGui::NewLine()
  - tested some cases : what works what not using Logitech BRIO and Logitech C920


2018 September 24th

Tested OpengYUV : turn ffmpeg YUV frames into RGB(A) frames using pixel shaders. Fast, light and brillant somewhere.
WIP : SDL_kitchensink -> ffmpeg YUV frames -> vertex / fragment shaders ->  RGB(A) (or BGR(A) -> cv::Mat 
Should be as light (incompatible) accelerated YUV + SDL Renderer
Need new classes or static functions : loadShaders and convertFrames

Fixed some little useless constants in the Makefile
Improved the PTZ ui

Forked OpenCV 3.4 and proposed a full diff for all the changes in #12498 
Link : https://github.com/opencv/opencv/issues/12498


2018 September 20th

Implemented Pan Tilt Zoom on Linux. Works very well
TODO : verify it works on both Windows and Linux

2018 September 11th

Tested on Windows : works fine. Added the other parameters (not everything works though ...)
Zoom not working with Lifecam 3000 (mybe no hardware zoom ?)
Improved the UI on Windows.
ebuilt OpenCV3.4.0 on Windows (64bits only)

2018 September 10th

Implemented hardware zoom : CV_CAP_ZOOM_ABSOLUTE.
Tested with Logitech C920, C922 and Logitech Brio Works very well.
TODO : test with Logitech C920 and Microsoft LifeCam300 
FIXME : yet missing: a getter, to retrieve the min/max zoom values for the current webcam.
Modified: OpenCV 3.4.0 sources (mainly modules/videoio/src/cap_libv4l.cpp)
TODO : do the same thing on Windows + remove the hacky previous zoom (select an area will now be used to draw)

2018 August 9th

DONE : yuv2rgb sources added in the tree
STATUS : yuv2rgb builds fine, including in Windows cross compilation
TODO : test with SDL_Kitchensink, and use only what is needed

2018 August 8th

After some fight with SDL_Kitchensink, I finaly implemented a solution using SDL for the sound and OpenGL 
for the rendering (the SDL renderer is sadly NOT an option).

Current status :

movie (h264 or similar compressed format)
     |
     |
     |
    FFMPEG   ---->  the sound is extracted ----> we can hear the sound
            |
            |
            ----->  the video is extracted as YUV420P flow (sw_scale) ---> YUV420P to RGB(A) (broken)--> rendering

IMPORTANT : sound and video are in perfect synchronization (using SDL implementation (SDL_Audio + SDL_Renderer)
The problem is that miniDart use Dear ImGui, and the SDL renderer does NOT comply with it. Then, the modification 
consists in create an OpenGL texture, and render it using the generic SDL_GL_SwapBuffer(window)

""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   Work In Progress : YUV420P to RGB(A) conversion  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""

Tested two very promising solution :

POSSIBILITY 1) yuv2rgb 

Link : https://github.com/descampsa/yuv2rgb
Under BSD License, from Adrien Descamps : seems to work very fast.
Includes SSE, SSE2, FFMPEG (un)aligned options

Estimated rendering time (per frame) : <5ms (SSE2) or ~ 10 ms (FFMPEG)  // FIXME : verify !

SOLUTION 2) H264 Decoder

Link : https://gist.github.com/roxlu/9329339
CURRENTLY NO License (author contacted) 
Seems to be even faster, using Vertex/Fragment shaders and VAO.
The brillant idea consists in directly render the YUV420P with shaders. The subtility is in the shaders code : sum 
the three Y, U and V shaders with corect coefficients, et voila, no need to convert anything ...
Started the first solution implementation, per see (everything compiles, AND windows porting works already)

Estimated rendering time (per frame) : < 0.1 ms (more interesting, no CPU overload but license issue, as very often ...)


2018 August 1st

Tested the awesome Sdl_Kitchensink examples after resync.
Less than 8% of CPU load to watch a vid√©o (including sound) : this is impressively efficient.
FIXME: include that feature inside miniDart
(problem to be solved : avoid using the "SDL2 renderer", means extract directly the frames from ffmpeg contexts)

Removed the broken getTextureInfo()

2018 July 31st

Renamed VideoReader VideoPlayer everywhere.
Continued the classes/members identification in main.cpp


2018 July 30th

Using Fragment Shaders  (glsl #version 120+, likely 150 everywhere could be nice) :
cpp-cheet/opengl+glfw (modified the example from : https://github.com/cirosantilli/cpp-cheat )
glfw_webcam_capture + v4l2 (too bad ... bcause not portable :-/ )
- can now capture the keyboard, and use uniform values returned in real time
- can now duplicate the images captures, flip horizontaly at ~ 0% of CPU load (no idea for the GPU load though)

TESTME : implement distorsion correction (using ImGui, should be easy !)

Modified glTexPArameteri when loading a texture on the GPU : now using GL_LINEAR (was GL_NEAREST, less precise)
Continued factorization / classes rewriting
Replaced resetWebcam with resetCaptureDev everywhere.
Implemented Engine.cpp / Engine.hpp
Started gui.cpp / gui.hpp implementation coupled to application.cpp / application.hpp


2018 July 22nd

Tested several ways to display a video, including using FFMPEG (until ~ 700 fps with vsync disabled), FBO, or pixel shaders (textures, as VAO)
Learned a lot OpenGL versions, and GPU programming.
Fixed the "Record a video" working even when paused. Now : the choice is no longer abailable when paused.
Fixed the selected area not correctly drawn (missing side(s)) when the view has been resized.
Fixed : the selected rectangle can no longer go outside the image area.
Now the user can select the thikness of the selected area outline (between 2.0 and 4.0 pixels)
Added : LEFT_IMAGE_BORDER, RIGHT_IMAGE_BORDER, TOP_IMAGE_BORDER, BOTTOM_IMAGE_BORDER constants

Started working at bezier curves (+ arrow)

2018 July 16th

Added -march=native -mtune=native CXX / CC flags // FIXME : choose the best options


2018 July 10th

Upgraded one more time Dear ImGui
Started a new implementation, in 0.999 version. Now separating Engine + GUI + Application and so on

2018 July 8th

Updated ImGui version to 1.63 WIP, introducing new SDL2 way to create OpenGL3+ context.
Tested with my new machine : OpenGL 4.5 is ok :-) (needed : universal 3.3)

2018 June 22sd

The user must confirm before to delete all shoots

2018 June 12th

GK follow up : now using ImGui::AlignTextToFramePadding(), giving perfect alignment


2018 June 3rd

Removed "Delete all points"

Fixed a subtil bug : with a right click, the GK follow up was flickering. The trick was to use 
OpenPopupOnItemClick() instead of OpenPopup()


2018 May 30th

OpenCV 3.4.1 : libjpeg-turbo is now the default
Found something interesting about RTSP issues :
1. https://github.com/opencv/opencv/issues/11619 (reference issue) 
2. https://github.com/opencv/opencv/blob/3.4.1/modules/videoio/src/cap_ffmpeg_impl.hpp#L811-L823 (second interesting link)


2018 May 25th

Fixed https://github.com/ocornut/imgui/issues/1836
https://github.com/opencv/opencv/blob/3.4.1/modules/videoio/src/cap_ffmpeg_impl.hpp#L811-L823

2018 May 8th

Localization started : ~40% done

Only the localized string will be included in the binary. The locale will be put un the filename
e.g. : miniDart_fr.hpp or miniDart_en-US.hpp

Add a new localized version ? 
1 duplicate miniDart_en-US.hpp in a miniDart_your_locale
2 translate every string inside
3 fill an issue to ask for your locale, and attach miniDart_your_locale.hpp file
4 if no problem (bad strings, and so on), the locale will be added


In the code, one default string will be used, and at buildtime, a localized resource will be created
First create all French + English strings, and collect them in separated files.

Added localization directory
Debug information will stay in english


2018 May 6th

Continued Application class implementation
Continued code cleanup + fixed compilation (no warning, no error)
CaptureDev class: Implemented IsCaptureOpened (+ mb_opened, private bool) , IsCapturePaused (+ mb_paused, private bool) + fixed compilation
Improved the layout (cosmetics with fps) + created child3 in delay tab.
Started to implement annotations buttons

2018 May 4th

Fixed the bug : wrong number in the recording in progress video. Now pointing to the exact name.
Now fps + time per frame are displayed, per see whether the cam works well or not (always usefull).
TODO : put the frame capture in a separate loop


2018 May 2nd

Added 4 new fourcc (codecs): Divx 5.0 (DX50), FLV1, U263 and H264 // tested on Linux using .avi contained ONLY (no sound)
N.B. : H264 needs libx264 to work, means OpenCv to be compiled and linked to it)
Created the sources skeleton + added licenses and diffs at every needed places
Fixed: fps is a double, not an int (cf : https://docs.opencv.org/3.3.0/dd/d9e/classcv_1_1VideoWriter.html)

2018 May 1st

More layout improvements
Added an option to reset video container and codec to default value
Continued code factorization
Implemented live resizing : works very well // yet some little glitches, but nothing important
Fixed the layout issue with the webcam parameters : the widget does no longer overlap the edge
Capture device parameters and output device (recorder) parameters are now separated
Implemented  new modal dialog box "advanced parameters" for record settings
- available containers are : .avi, .mp4, .mkv
- vailable video codecs are : DIV3, DIVX, MJPG, FMP4

FIXME : 
Implemented, but disabled because won't work until features will be added :
- set fps. Current available fps are: 15, 20, 24, 30  // won't work until the main loop is modified
Implemented, but (won't work until "resize Mat dimensions" will be used)
- set recorded images size. Current available image sizes for recording : 640x480, 800x600, 960x540, 1280x720, 1440x1080, 1920x1080

2018 April 30th

Dropped eMode // Visualization, etc
Fixed cosmetics in selected tab (moving from 1 to 2 pixels from left to right (and vice versa)
moved enum aTheme in application.hpp
created external b_lostWebcam
created resetWebcam.hpp and resetWebcam.cpp


2018 April 26th

ImGui Tabs:
Code cleanup
Resync'ed the code with Dear ImGui 1.61 WIP
Added IMGUI_VERSION_160_OR_MINUX GUARD for old code
Lot of simplifications inside imgui_tabs.{h|cpp} code
Simplified the interface :
- removed :ImGuiUserCol_TabHover, ImGuiUserCol_TabTitleTextNormal, ImGuiUserCol_TabTitleTextSelected,
- now using ImGui themes
- added StyleColorsLightGreen() theme, since it is miniDart legacy theme
- removed duplicated code
- improved the tabs colors, and text colors

Commited a little screenshot (dark theme)
Implemented 4 themes, fully selectable in miniDart :
- LightGreen
- Dark
- LightBlue
- Classic

Removed setStyle() // saved > 200 lines of code !


2018 April 25th

UI Theme : Improved the UI colors, now using the main theme + added more light is the visual effect
UI Theme : FIXME: improve the uggly blue for ImGuiColButtonActive color :-/
Layout : Fixed the useless menubar in the tabbar. Now the look appear better (no more 20 pixels height lost)
Code :Using FFMPEG 4.0 on Linux
Imaging : FIXME : follow https://github.com/opencv/opencv/issues/11324 (MPEG issue confirmed)

2018 April 22nd

Testing panorama : https://github.com/ronen25/panorama, extremely well written
Bumped the FFMPEG version to 4.0 // OpenCv and OBS seem to be happy :-)

Added FFMPEG_Player (under LGPL), forked from https://github.com/hansonLGE/Player_custom_ffmpeg
It means images AND sound can be managed inside miniDart.

Current status :
- the code compiles well, but will need to be linked as LGPL library in the future.
- a lot of work (understand how it works really)
- some removing and cleanup to be used inside miniDart.
- rewrite a class for loading / pausing and unloading a movie 

Fixed the CaptureDev class : works very well, and allows to separate the webcam feature from the
other software features.
TODO : write the application class, including style setting, write tab contents

Tested 1.61 WIP ImGui : seems to add an extra overload, for unneeded features.
Added IMGUI_VERSION_160_OR_MINUS flag : undef it allows to test 1.61 WIP
Fixed the hack with fonts in ImGui.cpp: it is no longer needed to add the default font.


2018 February 19th

Win32 version can be built and tested using wine64 now. Not yet sure it works on a legacy win32 bits though. 
Tests in progress ...
Fixed for true the looding twice the clip in analysis tab. Little issue : on Linux, the allocated me is not immediately released,
causing an useless memory overload. No problem at all on windows.

TODO : fix the 2GB issue on 32 bits applications, e.g. with a more intelligent algorithm only loading a "scope " of images.
For example : only load 5s of images before and 5s of images after the current frame number,
to avoid the 2GB memory limitation hit.


2018 February 17th
Now using ImGui 1.60 WIP (including the new context feature) + OpenGL 3.x only
Removed -DUSE_GL3 flag, now obsolete
Did some cleanup in the makefile

2018 February 13th

Got OpenGL 3.3 working !!
SDL_Init() MUST be set BEFORE SDL_GL_SET_ATTRIBUTE(), and finaly OpenGL > 3.0 works :-)
Removed  -DUSE_GL3 extra option at build_time.
Idea : be able to select at launchtime ? (just in case of very-old hardware ?)

2018 January 24th

Worked at the canvas
Fixed undefined zoom dimensions at first launch
Fixed a crash with the last searched image in the slideshow
Fixed a big overload when opening a video file ( initVideo() was called twice)

2018 January 23rd

Prepared the canvas in ANALYSIS Tab
Removed useless booleans and variables :
- b_draw_label
- b_draw_vector_of_annotations
- b_watching_video_file
- b_watching_goalkeeper

New state machine, new events implementation (TODO : improve me)
Improved the logical.
Fixed a crash caused be open a file outside of analysis tab selected.
Fixed yet another shortcut bug with recording and pausing
The user can now choose the prefered modifier (in Preferences tab)
To avoid clashes with entering a string, I modified some shorcuts :
- record : was " r ", is now prefered modifier + r
- delay  : was " d ", is now prefered modifier + d

2018 January 19th

Improved the layout (bottom was non drawn)
Fixed the issue when directly recording after selection of the default folder for movies. 
Now it is up to the user to start the recording.
We now can produce MJPG as .mp4 or (DIVX as .avi)
Fixed a silly bug due to cv::CAP_DSHOW not correctly used (capture_dev had a wrong value)
Prepared code factorization / class writing 
Implemented, and now systematicaly using resetWebcam + new signature (shouldn't it be set ?)
Removed splines (unused) code
Implemented a third choice network source (IP webcam)
Now using popup to select the video flow source
FIXME : not working on Linux, untested on Windows

Removed crop bazaar

2018 January 15th

Added the lines to prepare IP webcam use (should be straight forward).
Started FFMPEG + SDL2 
- watching a video (sound + frames) : SDL_kitchensinc (MIT)
- recording a video (no sound yet) : based on fplayer but not only (license ?)
Working : 
- open a video+audio but play the video only
- open a video + sound, and play it 
- catch the sound only (e.g mp3 music)
- demux a video + audio in two flows

TODO : learn how to mux and create a new video


2018 January 8th

More Zoom fixes :
- it is now resizable.
  Pro : the size we need, easy, and natural ;
  Cons : ratio is no longer guaranteed.
- the zoom value does no longer appear (was not reliable)
- ImGuiWindowFlags is set to ImGuiWindowFlags_NoSavedSttings (means same size every time, when opening)

2018 January 4th

FIXME :
- wrong 7m pop_back count ?
- number 


RELEASED 0.6.9 bcause the zoom works very well

Now, the main window fits the SDL window (the Demo window is de facto no longer reachable)
Modified : change the coloredrectangle for the zoom area behavior.
=>now, the color is modifiable only when the lense is disabled.

Fixed the ZOOM : after some computations, it finaly works fine :
+ added funky color to the focused lense window ;
+ minimal dimensions (to allow always being able to closing it) ;
+ centered image ;
+ zoom until 3.0 + the zoom value looks realistic ;
+ no crash ;
+ avoid resizing outside of the image, bcause the colored rectangle won't be drawn correctly.

2017 December 31st

RELEASE DAY : version 0.6.8 (Canvas started)

Fixed the capture_dev and frame initialization issues on both Windows and Linux.
Changed the window size for locked (ImGui demo is now no longer reachable, but on Linux)
Fixed 7m wrong count (was a missing unPenalty.pop_back() when removing last shoot )
The Zoom seems to work correctly (remains an offset on top, but nothing too bad)
Known issue : shooters number does not work (only the last number appears, and the file is lost)
TODO for 0.7 :
- write two new classes. One is shooters_manager and the second is shhoters.
- write a users guide, including screenshots, to explain all the proposed features

2017 December 30th

Zoom seems to work correctly. Some improvements are still needed.
Started the shooters class implementation
Fixed : the Lense stays on top now (ImGui::SetNextWindowFocus())
Definitely added FontAwesome from Juliette Foucaut + added files and licenses in the sources

2017 December 29th

7m seems to work now
Added 7M (was missing ! :-/ )
Testing Icon fonts with FontAwesome ( webcam, folder, clock, play / pause and so on)
Fixed the timer issue  (b_timer_paused didn't not work as expected)
Fixed yet another issue with a missing shooters.pop_back()

2017 December 28th

Recent changes :

Now using FFMPEG 3.3.4 and OpenCV 3.4.0 + SDL2 2.0.5
Already included (but not used) : Tinyxml2
Tests in progress : Sini (serialisation for ImGui)

TODO BEFORE TO RELEASE :
[Next version, because NEEDS mingw64 5.0.x]  Workaround the Windows 10 resolution issue
[DONE] Fix the cropped frame issue (with lense)

Canvas : we can draw letters (any loaded font) in a given clipped rectangle now.
List of currently drawable objects  
- rectangle empty or filled (of a given color)
- circle empty of filled (of a given color)
- letters in a clipped rectangle
- lines (2 points), of a given color
- images as texture in a given area

Needs more work: 
- create a file of numbers to be push/poped, representing the shooters numbers
- bezier curves (2 points + 2 control points) of a given color

Modal + contextual menus work as expected
Insert text seems to work now
Undo now works (including cancel last action)
Stats seems to be ok now

Enter Text works. e.g. show the shooters numbers starts to work.


2017 December 27th

Implemented a contextual menu to modify the arrows, and what has to be typed (shooter number e.g.)
We can draw arrows, and modify them alive
Statistics start to work: some percents are correct
We can undo shoots, and stats are right
Continued the canvas implementation
Removed right click to remove the last shoot (allow to add a contextual menu is prefered)

2017 December 25th 

Fixed some crashes with the lense (select outside the frame is now working better,
                   and now accidentaly crashes. Was every time :-/ )
We now see the color picker at launch (the previous area height value was too little).
TODO : remove the webcam needed at launch, write classes and factorize the code the C++ way
Started : how to draw text (the idea is to add the shooter number beside the shoot)
Started : how to draw bezier curves ? (using the current algo)
Did some code cleanup
We can add statistics or not.
Select the statistics forces to enter the shooter number
Fixed the rectangle thickness (2.0 now)
Fixed some crashes
Improved the layout (GK statistics)

2017 December 24th

Improved the playground for GB statistics.
FIXME : what is expected ? // radiobutton OR popup and list ?
Done : let's reset the shooter number every time


2017 December 22nd

Continued code cleanup
Working at bezier curves
Started working at using some icon-font (e.g. AwesomeFont from Juliette F.)

2017 December 19th

Released 0.6.6 (because of crashes)

FIXED the crash caused by undefined default path to save videos // 

WORKING AT : save once, and be able to modify it ?

Improved the UI when doing GK follow up
- select the shoot type
- trace the line => opens a modal dialog box asking to enter shooter name + more information about the shoot
- validate the shoot increments the statistics
NEXT : fix several issues with the lense (disable it currently ?)

2017 Decembre 15th 

Released 0.6.5 + uploaded the archives on the Github repo, because I had to ga away from home several days
URGENT : Will need to upgrade asap, due to some crashes on Windows

2017 December 10th

Now we can select the image format, BUT we can only record in 720P (FIXME)
TODO :
START WITH
- select
- select the output video format ( .mp4, dixv, and so on) 

END WITH :
- retrieve the webcam profile, and ONLY propose what works

Improved the layout
Started to fix the lense issues
- fixed some instant crashes ( pause webcam when the lense is started, and so on)
- made some code cleanup

2017 December 8th 

Atelier Analyse, improved the layout
- select source (webcam or video)
- select the webcam
- select the work path to save videos

Fixed a crash when b_paused is true, while clicking "show the lense".
Started the new scenario when entering a new shoot // GK follow up


2017 November 18th

Fixed all last warnings :

1. https://github.com/ocornut/imgui/pull/1445

../../imgui_draw.cpp:93:54: warning: ‚Äòspc.stbtt_pack_context::nodes‚Äô may be used uninitialized in this function [-Wmaybe-uninitialized]
 #define STBTT_free(x,u)    ((void)(u), ImGui::MemFree(x))


2. https://github.com/ebachard/Kiwi8/commit/e441e2ceeccc0b75d0a6da59ed8cabca0dbb77b7
https://github.com/ebachard/Kiwi8/commit/e441e2ceeccc0b75d0a6da59ed8cabca0dbb77b7

3. 

 warning: format not a string literal and no format arguments [-Wformat-security]
             ImGui::Text(names[selected_level]);


TODO : organize everything ...
STARTED : the ZOOM somewhat works. The problem is some wrong coordinate somewhere
STARTED the CANVAS 
Works (improve me) : we can draw Bezier curves, of any color. Not working : control points are not accessible yet
Works (improve me) : we can draw circles, or filled circles, of any color  // FIXME : learn more how it exactly works
Works (improve me) : we can now draw colored lines
Works (improve me) : we can now draw rectangles, filled colored rectangles, of any color

2017 November 12nd

TODO : implement the same for other handball players
Improve the playground image, e.g. including sectors ?
Fixed a dumb typo.
Modified the tab name for "GK follow up"
Improved the layout
- added half-time selection
- added "backup the follow up" button
- added N2F teams + the right case to be selected
Missing : knowing the colors, draw associated cubic splines + allow points to be moved.
Added colored shoots : fails / success / out /  for the GK
Added : title, name of the GK, level, all teams in the group, adverse team, championship, match or training

2017 November 11th

Implemented columns includng vertical splitters // FIXME : overlap (wrong initial values ?)
Implemented Handball playground drawing, using Child windows
Implemented types of shoots
Implemented shoots and goals stops


2017 November 9th

About save a file inside a Windows directory :
FIRST : https://www.jimrich.sk/2015/01/18/environment-specialfolder-on-windows-linux-and-os-x/
https://stackoverflow.com/questions/5211817/how-to-modify-a-file-in-program-files-with-win7-security-rights-to-a-directory
https://msdn.microsoft.com/en-us/library/bb762181(v=VS.85).aspx
https://stackoverflow.com/questions/6010472/copying-file-to-a-directoryc-or-cprogram-files-that-i-dont-have-permission?rq=1

2017 November 8th

Tested the splitter. Yet some bugs, but seems to work
Now the tab window does no longer use a title, is no longer movable, and so on
Better memory footprint, but we can do better
Fixed the oldVideoFile / currentVideoFile stuff
Improved the Close(), added a better cleanup
We now can open close a video in runtime
Video is now unloaded by default (lighter)
The slider appears only when a video is loaded
FIXME : yet some memory leaks ?

2017 November 4th

Added handball playground in a new tab (FDME GB)
Started searching a layout + a color scheme

FIXME : HighDPI seems to NOT work on Windows

2017 November 3rd

Added HighDPI rendering on Windows10 (TESTME ...)
(code taken from : https://nlguillemot.wordpress.com/2016/12/11/high-dpi-rendering/ )
Removed sdl_abort in main, replaced by sdl_application_abort, located in sdl_utils.cpp
Continued code cleanup
Improved the chronometer  XX min YY s for time > 1 min  (or YY s ZZ if tome is < 1min)
TODO : do the same with the recorded value, or just keep displaying the seconds only ?

2017 November 1st

Implemented VideoReader class
We can now open a video.
Improved the font size for the chrono and the delay times (... and a bit the look)
delay incrementation or next/previous slide  : only when the right tab is active
Implemented the slideshow + open any video file
Tested under Windows : OK for the installation, and the various tests.
Using dynamic arrays (vector) for the slideshow, and it will very probably be the same for the slow-motion

2017 October 25th

Back to the customized Windows filepicker + hacky filters, since
the official Windows one does not work.
Finally reverted default to windowed mode, but bigger size (1400 x 780)
Thus, the Windows user will think easely to switch to the max window size,
and this will avoid the hidden filepicker issue (safer for the end user).


2017 October 20th

Fixed the ZeroMemory hack at build time (untested yet)
Added windows native filedialog nfd_win.cpp in the .cpp files list (untested yet)
Worked at the File Picker not raising on top issue. TBC

2017 October 18th

Improved the UI using the nice checkmarks OCornut did
(see https://github.com/ocornut/imgui/issues/1378)
Testing the zoom without success.
Maybe we'll return to opencv ROI + space to add /remove the zoomed window.

2017 October 14th

Take some time to mprove NativeFileDialog on windows ?
https://github.com/mlabbe/nativefiledialog/pull/33/commits/dedf95faa754b00a34c13bc4cf587e16d002b67c

Now using InnoSetup (http://www.jrsoftware.org/) for the Windows packaging
Install : ok, no problem
ninstall : perfect. No more traces
FIXME : where are stored the recorded movies? (and how to manage that ?)
o
Tested the Windows version
FIXME, Windows : CTRL-O triggers a strange behavior. The current window is hidden, then the FilePicker appears
FIXME, Linux : CTRL-O works nicely, but the filepicker opens on top only once ...
++++ : on windows, we can change the camera in runtime (add a new one, reset one, use another one ...wow !)

2017 October 12th

Added menu entry to switch fullscreen /desktop mode.
Fullscreen is now default
Fixed Windows build warnings ( warning: ISO C++ forbids converting a string constant to ‚Äòchar*‚Äô ) : a simple cast
into char * was sufficient.

Finaly implemented the FilePicker using native file dialogs :
- gtk+3.0 on Linux : can open any video file
- native on Windows (Win7+) // untested, but why should it not work ?

FIXME : on Linux, the second time, the filepicker goes under the main window.

No problem on Windows so far.
Available file formats are limited by ffmpeg only.
Currently : .avi, .mp4, .mpg, .ts, .MTS, .wmv + any other file (must be a video of course ...)
Strange issue on Windows: every filter format must be duplicated in the list (??)


2017 October 10th

Working at FilePicker implementation (from Kiwi8 -my code- and OpenBoardView projects)

Annotations :
- create a vector of annotations
- an annotation can be : a text (b_isText, bIsCurve, b_IsArrow, b_IsPoint ... )
- access a given annotation, and set it as "active" clicking on it
- transform it into a Bezier curve
- be able to suppress it using DEL (or better : a right click + a contextual menu !)
- remove the last annotation (if any) using BACKSPACE or right-click


Testing show_camera. The principle is to enumerate all available cameras at launch, to avoid bad surprise in runtime.
Works out of the box, and contains an interesting use of vector of cameras.
The sample of code comes from : https://github.com/fabiopolimeni/opencv-samples (MIT license)


2017 September 24th
Now, it's possible to change the theme on the fly. Only traditional green and blue light are available at this time.

2017 September 22nd
Implemented activity / total time with the timer. Things are now well working.
And we can choose between getTimeSinceTimerStarted() and getActivityTime().


20th September 2017
It's now possible to set/pause reset and record the time
Implemented the Timer UI
Implemented the Timer class

15th September 2017

Now reseting the delay to 1 s when switching the webcam
or when toggling delayed -> not delayed display


13rd September 2017

""""""""""""""""""""""""""""""""""
"     Released version 0.5.4     "
"                                "
""""""""""""""""""""""""""""""""""

Build 69 tested on Windows 7, using several webcam (no integrated webcam though). The result is :
- capturing 30 fps with any of them (but very light dependant. no idea how to improve)
- every feature works, including recording
- no more crashes, even when the wecam is not available

Started another try to display inteligently the "Retard x second(s)" // read comments in main.cpp
Continued code cleanup
Added GTK+FLAGS to select GTK+2.0 or GTK+3.0, because libopencv_higui is linked to 2.0 :-/
FIXME : rebuild OpenCV (linux only) without gtk+-2.0 support 
Tested OpenCV crop image : causing general slowdown with the capture device. Means it needs some improvements
=> kept as a build option

11th September 2017

Simplified the recording (duplicated code)
We can now record a video using shortcut and/or checkbox
Delayed display can now be started from both shortcut and checkbox
Removed the "n" shortcut (new record)
The delay can now be adjusted using RIGHT/UP LEFT/DOWN arrows as shortcuts 
// FIXME add another similar shortcut for the slideshow plugin
Added SDL_DROPFILE case in Input class

8th September 2017

Implemented resetWebcam(). Works well when everything is connected _before_ miniDart is launched

FIXME :
- crash when the webcam got disconnected + selected
- changing the webcam needs more love, because the parameters may vary
(mainly fps e.g. LifeCam3000 30fps / vs 24fps for Logitech C92x)
Started the layouting with pause / delay / record. Seems to work, excepted recording, yet a bit buggy (but the rest is OK)
Tested checkboxes, radioboxes and some nice ImGui features.

5th September 2017

Upgraded ImGui version to 1.52 WIP : testing the new color palette !
Continued code cleanup
Prefer change for PressedOnRelease behavior with ImGui API
See : https://github.com/ocornut/imgui/pull/1113/commits/8df58e2cfde40c23556966a90730182f5245327a

28th August 2017

Fixed the cv:VideoWriter.release() issue.
FIXME : CaptureDev class seems to work ... but not in fact: initialization issue (must use the same thread ?)
Implemented CaptureDev. Remains the initialization problem
Forced to keep the main part of CaptureDev::Init() (probably a pending pointer issue)
Added RangeSlider feature for the slideshow, 
including an given area of frames (Rmin, Rmax)to be shown for the slow-motion feature
From left to right, it gives : Nmin = 1 (always) ; Rmin == range min ; Rmax == range max ; Nmax = size of the video
Tested the prev / pause / stop / play /next + movie icons. Needs some improvement
Fixed lot of leaks introduced with the icons. Seems to be more quiet now.

23rd August 2017

Tested the new color picker (wow !!)
delay appear continuously, to advise the user there is one delay running.
Testing ImGUI 1.51 WIP.
Fixed the last apparent issue : using the wrong font (ProggyClean is uggly btw)

22th August 2017

OpenGL : removed SDL_GL_SetContext Core + Profile per see. Seems to be faster (testme more ...)
Continued code cleanup

20th August 2017

Continued code cleanup.
Started to check licenses. Think to copy paste ImGui license.
FIXED the slow framerate on Windows. got 30 fps with ALL webcams now ! (aaaaaaaaaahhhhhhhh......)
Drag and drop works everywhere, with slow motion and slideshow.
TODO : add the zoom, already working on both OSs.


19th August 2017

Drag and drop works on Linux, but builds on all OSs. The magic is "case SDL_DROPFILE" event.type !
slideshow works on Windows
slow-motion works on Windows too. TODO : implement the drag and drop, to play a clip !

18th August 2017


TODO : Windows packaging for a full installation
Continued code cleanup + simplified the makefile
started "File open" using native file dialogs
fixed the nativefiledialogs build on Linux ! (OK since a while on Windows though)
fixed slideshow build for Windows. needs improvements. use cvui ?

17th August 2017

fixed slow-motion : it is now possible to open a video on Windows, using slow-motion filter.
Use VideoCapture video(filename, cv::CAP_FFMPEG) + add opencv_ffmpeg310.dll provided in the bundle (root dir) dit the trick.

16th August 2017

Simplified main.cpp, prepared more code factorization
Tested LifeCam 3000 from Microsoft (35 ‚Ç¨ only !!)
Tested on Linux only : 720p / 30fps (capture, and record ok at 24 fps)
Optical less precise than Logitech, but gives good results though.
FIXME : test on Windows
Did some code cleanup (indentation, simplification)

15th August 2017

Continued code simplification + factorization
Created sdl_utils.cpp / sdl_utils.h (getInfo(), sdl_abort() )

14th August 2017

Modified the sources tree:
- s/sources/src/
- added src/3rdparty, now containing imgui, tinyfiledialogs, gl3w and so on
- modified the Makefile accordingly. Now building ok

Fixed all Linux warnings
- imgui_tabs.h : /*static*/ _drawPartialRect  // (never used as static)

- Intialization value out of bounds (SDL_NUM_SCANCODES == 512, MICE_BUTTONS_NUMBER == 8):
  mbIsInputAKey[SDL_NUM_SCANCODES-1] = {0};
  mbIsInputMiceButton[MICE_BUTTONS_NUMBER-1] = {0};

Fixed several Windows compilation warnings :
- gl3w.c:29 : reinterpret_cast<void *>(wglGetProAddress(proc))
- gl3w.c:31 : same issue
- tinyfiledialogs.c:668: s/char */const char */    TESTME IN RUNTIME
- tinyfiledialogs.c:726: s/wchar_t */const wchar_t */  TESTME IN RUNTIME

Modified the Makefile : -D__Linux was used by default whith !NATIVE_BUILD  (??)
FIXME : maybe fixed a silly bug on Windows (cannot test until back at home, or using a machine under Windows)

Found the bgfx Color Picker. Needs some learning before to test it, but that's a good start.
Continued to search _why_oh_why_ the frame rate is slow on Windows.

7th August 2017

Found an interesting other solution, piping ffmpeg AND using opencv_ffmpeg_64.dll (luckily, I got it built ...)
Found lot of links saying cp_dshow is BROKEN  ( + opencv issues confirming it's true :-/ )
Worked at (yet) Windows cap_dshow still providing webcam images at 15 fps (instead of 30)
Fixed the 2 warnings when using ImGui::Image, using reinterpret_cast< void *> () instead of (void *):
e.g. : 
warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]
               ImGui::Image((void *)backgroundTexId, ImVec2(640, 360), ImVec2(0,0), ImVec2(1,1),

23rd July 2017

Updated the roadmap
Worked at :
- open any vid√©o (images+sound) : dranger ffmpeg examples (part 1)
- WaitKeyEx (OpenCV > 3.1.x). Basicaly returns  (code & 0xFF) => already using it ;-)


22nd July 2017

Started to think how to insert the slideshow _and_ the slow-motion : probably in a tab
TODO : replace all OpenCV highgui calls / callbacks, and turn them into ImGui thing

Added tiny file dialogs (open/save).
Compiles fine, for both Linux and Windows, but not tested yet (too late)

Tested opencv highgui _over_ SDL2 + OpenGL : seems to work with some hacks, but there is one last issue:
the OpenCV Window goes _under_ the main window :-/ (no idea how to fix that).

Same issue for cvui, who needs a waitKey() to work (else, events are not captured).
Fixed the tabs background issue : fill it before to draw everything. Proposed a pull request ...


20th July 2017

Fixed the bug with the tabs. Fixme : verify there is no overload caused by some redraw
Added some .png in the tree like play, pause, rewind, stop and so on.
Rendering is ok with ImGui 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
UPDATE : what could be a good webcams list ?

1st) C920 Logitech :
very good (2016 awarded.
Using 720p @30fps read/write on Linux, 15fps/20fps on Windows (why??))

2nd) C922 Logitech : 
very good (720p @60 fps possible.
Using 720p @30fps read/write on Linux without any issue, ... and only 15fps/20fps on Windows (why??))

3rd) Microsoft Lifecam  // not tested

N.B. : on Windows, the issue - captured video / webcam image not the same speed - 
comes from Logitech for the C9xx : disable "Right Light" and there is a jump at 30 fps,
without explanation, nor good reason. How to disable that "feature" btw ?

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
In progress : Enable / Disable / select a webcam, or another one  // display both ?
Started the main window implementation :
either use ImGui window splitter, or several windows, all with fixed dimensions

TO BE TESTED : main window splitter, e.g.:
 __________          __________         __________
|___A______|        |___A______|       |          |
|      |   |        |      |   |       |Fullscreen|
|  B <-|->D|  OR    | B  <-|-> |   OR  | (video   |  + move the mouse, will
|______|___|        |______| D |       |   only)  |    trigger a menu ?
|___C______|        |__C___|___|       |__________|


A : ImGui menu bar // to be disabled in fullscreen

B : several tabs :
- Delay : Video from Webcam : ImGui rendering (using OpenGL)
- Analysis : Videos from a given directory ( right click -> open directory)
- Credits  : 
- Help : contains all information, as Users Guide

C : current videos in a given (and selectable) directory

D : for a given tab, display usefull parameters e.g.:
- lot of buttons,
- sliders,
- checkboxes,
- strings, values (float and so on), 
- color picker,
- annotations
- timer (overlay) 

Add : contextual menu

- learning libav examples, to capture both images and sound



19th July 2017

Implemented CaptureDev class (90% done)
TODO : replace the existing code (curretnly in main)

""""""""""""""""""""""""""""""""""
"     Released version 0.5.1     "
"                                "
""""""""""""""""""""""""""""""""""

Fixed the fps consistency between recording and writing frames in a video : 
- 30 fps ON Linux, but 25 seems to be a good record/write compromise
- Only 15 fps (rec.) / 20 FPS (wrting) on Windows for the moment 
// TODO : find how to disable "Right Light" (magical from Logitech ...), and we'll see 30 fps on Windows too ...
Started 0.5.2_code_factorization_continued
Fixed the input initialization for Mouse buttons ( s/SDL_NUM_SCANCODES/MICE_BUTTONS_NUMBER/)
Let's stick with c++11
Simplified the Makefile for the cross-compilation (directly using opencv flags)

29th May 2017

Searching why the frame rate is so slow on Windows (15 fps), while we got a correct 30 fps on Linux
Microsoft documentation abut input devices is bullshit : 
- a loooot of pages (of jerk ) to read,
- complicated,
- you must guess a lot of things. Intersting information is propably fee dependant.

cap.set(CV_CAP_PROP_FOURCC ... ) gives on Linux :
CV_CAP_PROP_FOURCC returned by the webcam : -1
trying to set :   cap.set(CV_CAP_PROP_FOURCC,CV_FOURCC('M','J','P','G'));
VIDEOIO ERROR: V4L: Property <unknown property string>(6) not supported by device
640
480
30
VIDEOIO ERROR: V4L2: Unable to get property Exposure(9963793) - Invalid argument


28th May 2017

Installed NSIS (Windows installer) with apt-get // 2.x only ?
Started reading NSIS documentation


""""""""""""""""""""""""""""""""""
"     Released version 0.5.0     "
"         + NEW ROADMAP          "
""""""""""""""""""""""""""""""""""


26th May 2017

NEW ROADMAP :

    //                  (sort of) ROADMAP
    //
    // MAJOR FIXME : be able to separate, and control separately :
    // 0.3   [DONE]                               1.  SDL events
    // 0.4   [DONE]                               2.  OpenCV scene : Direct or Delayed frames from webcam
    // 0.4.1 [DONE]                              19.  Provide a proof of concept, mixing SDL2, ImGui, OpenCV and OpenGL 3.x
    // 0.5   [DONE cross compilation, mingw32]    7.  portability : provide a Windows version + the Linux one
    // 0.5.1 [started]                           22.  Code factorization : rewrite the event loop + input handling (urgent)
    // 0.5.2 [DONE]                              23.  Code factorization : write a CaptureDev class (urgent)
    // 0.5.3 [DONE, to be added later]           12.  Integrate new effects like slow motion
    // 0.5.4 [DONE]                              13   Slideshow : load a movie, and move image by image
    // 0.6   [DONE]                               8.  Organize the UI (TABS, in a window containing several scenes in same time)

    // 0.6.1 [DONE, draft for the moment]         3.  stack of annotations
    // 0.6.2 [DONE]                              18.  connect the UI to the user's actions
    // 0.6.3 [DONE works very well]              24.  arrows or curved lines using (cubic) splines
    // 0.6   [DONE]                               9.  ImGui menus, including context menues.
    // 0.7   [STARTED, will be multi windows]     4.  Fixed frames, where we'll annotate, and saves as vid√©os with annotations
    // 0.7   [in progress]                        5.  Geometry (homography, warp) + rotation
    // 0.7   [STARTED]                           25.  Organize the view to implement an annotations Canvas for single frame
    // 0.7   [STARTED]                           26.  finalize the Canvas annotations for single frame
    // 0.7   [STARTED]                           27.  Create an annotated video of a given length, for a single frame
    // 0.8   [not started]                       15.  implement view with images (first frame)
    // 0.8   [STARTED delay+text work]           28.  Insert annotations in a vid√©o  // ARROWS
    // 0.8   [STARTED, will be tinyxml2]         14.  implement preferences (tinyxml ?)
    // 0.9   [not started]                        6.  Multiple windows (one contains the webcam output + another with GK follow up)
    // 0.9.1 [not started]                       16   Write help
    // 0.9.2 [IMPORTANT, not started]            17   Localize in english, french, and prepare other locales
    // 1.0beta [DONE Win7+ missing MacOS, Linux] 11.  Packaging on every OS
    // 1.0                                       10.  Tests, API stabilization
    // (new devel cycle)
    // 1.2   [started on Mac OS X 10.6.8]        7. portability : provide a Mac OS X version
    //       (remains: make Carbon/Cocoa build with OpenCV)
    // 1.x                                       19. OpenCV blobs (multi)detection for tracking, like corners or detected contours and so on
    // 1.x [in progress]                         20. OpenGL scene => later, when using augmented reality
    // (new devel cycle)
    // 3.x [Started]                                      13. Collect datas and analyze moves, action areas and so on
    // 3.0 (stable)    once stabilized
    // Later
    //                                           14. Add sound suport ? (and synchronize ...)
    // [started]                                 21. In parallel : implement multi-threading, mutexes and so on to improve the robustness


TODO LIST : reordered priorities, now releasing 0.5
[Windows]  Fixed the VideoWriter issue : the good idea was to use cap.get(CV_CAP_PROP_FOURCC)
[Windows] : workaround with the broken SDL_Renderer(). Now using SDL_GL_SwapWindow();
The webcam view is now integrated into a tab (using ImGui::Image())
Fixed lot of Windows specific little broken things.
Released build 17 for Windows teting purpose. Waiting for feedback.

25th May 2017

Added NATIVE_BUILD flags : means building on Linux, and for Linux
Cross compilation wors on Windows, but got only 15 fps (by night, will retry with the sun)
Fixed the OpenGL 3.3 + FBO + ImGui + SDL2 (no renderer), cross compiled. Even a shortcut works on Windows

Cross compiled ImGui + SDL2 + OpenGL 3.3 + tested on Linux using wine64
Tested ImGui on Windows (SDL2 + OpenGL 3.3 verified) // + created the script to build it repeatably

Added the ALT + F4 shortcut => works well
Added -DHAVE_VIDEOINPUT + -DHAVE_DHOW, who helps a lot to make the webcam work on Windows
Fixed the /dev/video$i value on Windows (0 is for the first webcam)
FIXME : implement a Capture class (urgent)

miniDart (FBO + OpenGL 3.3, SDL2, no renderer) :
ISSUE#1 : ImGui not working at 1280 x 720 / 30 fps, using the SDL2 renderer (cross compiled)
ISSUE#2 : crash when trying to display any delay value (framecount assertion ?)

23rd May 2017

Anybody can lend me ... a Windows ?
The Makefile seems to be OK : remains one -fpermissive to remove
Launched miniDart.exe :-)  (but we see nothing, I realy need Windows 7+ ...)
Fixed the libturbojpeg (was not static)
FIXME : potential crash with dlopen, because of posix issue with dlfcn
Fixed OpenCV-3.1.0 cross compilation script (added CMAKE_INSTALL_PREFIX)
DONE : cross compiled libsdl2-ttf, libsdl2-gfx, libsdl2-image, libsdl2-mixer
DONE : cross-compiled OpenCV-3.1.0. Now : automatic build is OK.
Windows cross-compilation started. Remains : linking issues (libtiff and some other missing)
Makefile modified, using TARGET flag to differentiate both builds.

20th May 2017

Started cross compilation :

Added TARGET = WINDOWS : commented out => Windows build, else host build

TODO : libopencv  // COMPILE ME
TODO : libimgui
DONE : libGLEW  // see the script in glew-2.0.0 sources
DONE : libopenGL  => provided with  mingw32 (!)
TODO : libsdl2-ttf, libsdl2-gfx, libsdl2-image, libsdl2-mixer
ffmpeg  : done
libsdl2 : done

16th May 2017

TODO : improve the menu : Application -> Quit + shortcuts, File, (other items) and so on
Connected quit (ALT + F4 ) in the menubar. Works well
Added last pull request : save and restore sampler in GL 3 examples
=> no change when building with -DUSE_GL3 flag (yet no ImGui at all)
(https://github.com/ocornut/imgui/pull/1145)

15th May 2017
Started cross-compilation investigations.
Installed g++-mingw-w64-x86-64, gcc-mingw-w64-x86-64, libz-mingw-w64, libz-mingw-w64-dev, gdb-mingw-w64-target

13th May 2017

Tested NodeEditor
Tested borderless SDL Windows, using the simple : 
void SDL_SetWindowBordered(SDL_Window* window,
                           SDL_bool    bordered)
=> Seems to work very well. NEEDS MORE TESTING
Tested SDL_Movie, found : https://www.gamedev.net/topic/348340-play-video-files-in-sdl/
Seems to work, but maybe return to libvlc / vlccore one day.

12th May 2017

Found a new nice style color scheme (from codecat : https://github.com/ocornut/imgui/issues/1086 )
Tested splines from https://github.com/ocornut/imgui/issues/786 // from r-lyeh
TODO : learn all splines possibilities, and remove grid + window + be able to draw only_in the image

11th May 2017

Tested scherlock (multi-thread library) from : https://github.com/vmlaker/sherlock-cpp
Added ImGui::GetStyle() in main. TODO : will become Application::GetStyle();
Fixed some warnings (mostly imtabs)


10th May 2017

created miniDart_features.txt
+ added miniDart_features.txt in the devel archive
updated the TODO LIST


9th May 2017

Implemented Imgui::Image() inside the tabs + mini vertical sliders. WORKS VERY WELL !!


8th May 2017

Spent a long time on the slideshow : display image by image in a given selection (e.g. a sequence, a given video)
Implemented : 
- memory fooprint reduction
- code factoring and cleanup
- increase/decrease resolution in runtime.

Version 1 :
PROS :  secure (no crash, safe even with crappy videos)
CONS :  but memory overload : 1,1 GB of ram for a 10MB video (??)
Version 2 :
PROS :  the new window opens immediately, no delay, 60MB of RAM for a 10MB video => correct
        8% with 720p image, until 60% => correct
CONS :  possible crash when video contains bad images, not safe : the bad images are NOT detected (why oh why ...)


- performance issue : workaround, using b_clicked to change the priorities // IMPROVE ME


7th May 2017

Continued the code factorization processe
Played with glBlitFramebuffer (very close to glViewport) on the FBO version 
See : https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glBlitFramebuffer.xhtml

6th May 2017

Tested speed_test : Logitech C920 is able to make around 33 fps without any problem.

FIXME : Investigate

Tested threaded capture. Let's try to enlight the process (60% of 1 core -> too much).
The bottleneck seems to stand in the capture process, somewhere like cap >> frame or frame2 = frame.
See : Recent_2017_May/Threads

4th May 2017

Improved the tabs, modified colors + hacked text position issue // FIXME => do better
TODO : choose a neat color scheme for the tabs + find how to remove those ghosts + fill the window + render an image in the middle
TODO : implement states machine. Idea to be verified : states based on the tabs ?
TODO : re-write CaptureDevice, and Events Loop

3rd May 2017

Completed SelectROI : now we can select an area, change the color, on a video or using the webcam
Tested CVUI 2.0 : wow, very intersting, including image-buttons !!


2nd May 2017

Added some licenses in the archive (imgui tabs)
Learning ImGui code, tested lot of horrors ( named "ImGui addons" )
Continued the factorization work. Started with the update() problem
Added tabs from Scott Mudge. Works well.
FIXME : Now, how to add an image / a texture inside ?


1st May 2017

ImGUI References (patches and usefull changes) :
Tabs :https://github.com/ocornut/imgui/issues/1083
Menu item should be selected on Release() : https://github.com/ocornut/imgui/pull/1113/commits/8df58e2cfde40c23556966a90730182f5245327a
Add configurable color for button text in hovered and active states: https://github.com/ocornut/imgui/pull/1055

Code factorization :
- getInfo now belongs to application.cpp ( will become Application::getInfo() )
- s/#include <helpers.h> /#include <application.hpp>/ in main.cpp

Improved input.cpp : using c++11 way now for array intialization

TODO LIST for 0.5 :
- EXPLORE ImGUI features (and test code)
- start code factorization : handle_Events / update / render
- write new classes, and keep the code factorization on
- learn ffmpeg and libav : how to open a movie, and keep the soundtrack synchronously ?
- show and discuss new ideas with other people
- search for more load enlighment for the proc :
  Currently 60% of 1 core + 93MB of RAM just for the display (720p, 30fps + ImGUI + using SDL_Renderer)
  do we need to decrease the preview resolution ? Other tracks : use another thread, or improve the game loop (rendering issue ?)
- start playing with cross compilation : Windows and Linux only. Sorry Apple, but I don't want to pay for develop.
- rewrite ROI_selector
- add first frame preview
- test opening / saving / documents
- start annotations tests : create annotations, pen, insert text, rectangle, arrow 
- improve the zoom
- improve the UI (reuse/copy OpenBoardView implementation)
- test tab pages

30th April 2017

""""""""""""""""""""""""""""""""""
"     Released version 0.4.1     "
""""""""""""""""""""""""""""""""""

Improved the Makefile :
- simplified includes ;
- added separated locations for .cpp and .c files
- using $(shell some_command) // only Linux or Mac OS X
- using  ifeq ... endif make directives
- fixed subtles linking issues

Included ImguiTabs code : compiles fine, but stands as untested
Created zoom (separately) : select a region of interest (ROI) in the image, and the selection will appear in a separated and resizable window
Close to the final UI colors

TODO : add another callback (done) inside the ROI window, to allow zoomed region centering/moving directly (todo)
FIXME : reimplement ROI_selector class, because removed in OpenCV 3.2.0

28th April

Augmented Reality : tested OpenGL_cube_OpenCV : works fine, but needs glut to be replaced // FIXME
Played a bit with glm, and replaced glFrustrum is some example // cross compilation OK
Created SelectROI. // cross compilation OK
Fixed memory leaks:
- with the FBO glDelete()
- and the cv::Mat not released.
- Tested several times ~1 hour : not significative leak observed (considered as fixed, let's wait for other issues)

25th April 2017

Made big improvements in tracking area : see Recent_2017_April/Tracking directory for further ideas // cross compilation OK
Added USE_GL3 flag to allow the build using OpenGL 3.3 Imgui OpenGL3 implementation (for testing purpose)

17th April 2017

Fixed SDL_Renderer + ImGUI rendering issue : using OpenGL 3.0 (no way for more currently :-/ )  // TO BE VERIFIED
Fixed OpenGL Framebuffer Objects + Imgui : using OpenGL 3.3 ( pixel shaders 330 available)  // cross compilation OK
Added DroidSans true type font  // cross compilation OK
Created slow-motion (separately)  // cross compilation OK
Tested SDL2 FireWorks (including OpenGL FBO) // cross compilation OK
Tested NativeFileDialog (Linux=GTK+3, Windows=IFileDialog and +, MacOSX=Cocoa)  // cross compilation OK

1st April

Tested OpenBoardView : lot of interesting code inside, like :
- ImGUI implementation, and similar need like miniDart
- UI implementation
- UTF-8 implementation
- file formats implementation
- glad use
- sqlite use
- tinyxml : user preferences
- tiny
Tested Soloud + SndPeek Imgui : both work fine.
Soloud is voice simulation, and a lot of nice sound effects using fast fourier transform (aka FFT)
while SndPeek is FFT with sound, including a possible entry selection (e.g. sound from the webcam)
=> signal computation possible
Note:  SndPeek source code is no longer available, but I got everything under free license.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

(lot of time -> logs to come) 

FIXME : make ImGUI work WITH SDL2 (SDL_Renderer solution prefered)

Discovered ImGUI. Worth a try ...

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
6th October 2016

The webcam images are now drawn with a one pixel shadow
Can render several rectangles, and other areas (keep the right order is the challenge)

Menu : learning sdl2-space-shooter from Brandon To, maybe I'll be able to re-use the state machine
he implemented.

Tested :
- nanogui (OpenGL 3.x)
- nanovg (C, OpenGL 2 or 3.x)
- nanosvg (not a gui, but interesting)
- gwork (look very interesting)
- milligui (looks interesting, but not completed)
- nanogui-sdl (looks very good, not yet understdoo how to bind it with an SDL application)
- nngui (OpenGL 3.x)

Current prefered :
1 nanogui-sdl // maybe complicated, and to be tested (some people reported its not that fast)
2.nanovg (but C and OpenGL 3.x oriented)
3 kiwi // looks very simple to use
3 kiss_sdl // light, and easy
4 gwork

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
5th October 2016

upgraded SDL2 version to 2.0.5 from github (will be out soon)
tested :
- guichan
- Kiwi (long tests, very intersting and simple to use)
- imgui (very good, needs more investigations)
- cegui : too big, and fat for what we need
- neogfx : does not even build ...
- Gwork : interesting, looks complete, but no idea on how to use it


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
4th October 2016

Released 0.3.4 version

Todo : finalize capturedev class, replace the current code + use the simplified and more efficient 
new event loop in main.

Current (started) :
- capturedev class implementation
- draw a line
- think to the application look ! (and what is expected)

Everything compiles fine // SDL2, Opencv-3.1, Linux-4.2.0 x86_64, Debian

Untested but implemented (as dead code for the moment) all the code below :
Implemented a new event loop : created input.hpp, input.cpp (from OpenClassRoom SDL2 events example)
Added new classes :
1. common.hpp, common.cpp, to provide renderer visibility
2. capturedev.hpp, capturedev.cpp // TODO : implement all methods
Started Application::Init(); 
Started application.cpp, capturedev.cpp and objects.cpp implementation


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
3rd October 2016

Released version 0.3.3
Replaced some images in the nanogui-sdl widget, and seems to work well
Did some code cleanup
The captured frames can now be drawn in a given rectangle inside the window (using RenderCopyEx)
Removed the draw(renderer, frame) doing nothing serious  :-/ (why ?)

Created : 
- application.hpp
- capturedev.hpp
- drawing_context.hpp
- objects.hpp

Learned MatrixModelView mathematical model from Song Ho Ahn 
(explaining about OpenGL transformation from ortho to eye coordinates system)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
2nd October 2016

Tested breakout game => will use the patterns, extremely well written
Tested texture streaming example from Lazy Foo' Productions
Tested OpenGL 3.1 in SDL2 (testOpenGL3.c)
Created objects.hpp

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
1st October

Released version 0.3.1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
28th -> 30th september

Started to work on a contextual menu, at least find several ideas for the future implementation.
Implemented CTRL+W (close window event) in multiplewindows example from Lazy Foo' Productions
Tested nanogui-sdl, kiss_sdl, agar-1.5 and some other SDL GUIs
Delay value incrementation/decrementation can now work using shortcuts (up/down arrows).

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
24th -> 27th september 2016

Tested and played a bit with SDL_Timer example from Lazy Foo' Productions
Tested text input example from Lazy Foo' Productions
Tested Geometry rendering example from Lazy Foo' Productions
First delay, using queue. Tested working well until 100s (no sound)
Tested OpenGL in SDL2 window
Tested multiple windows managing (playing with focus)
Tested ViewPort implementation example from Lazy Foo' Productions

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
23rd september 2016

Tested OpenGL in Opencv scene (OpenGL_OpenCV.cpp)
Fixed flickering issue, when rendering more than once in the loop.
Set label works, with correct rendering.
OpenCV + recording + queue working 

Long discussion (by mail) with Nicolas Tournadour, about the expected behaviour of the software, and
how we could use it with young people (what works, what is important, and what is secondary).
Thanks to him for all the good ideas he suggested, like the "delay workout", all the annotations suggestions, 
or even the SlowMotion feature (filter should I say). Will investigate regularly and ask people all around.

What could be a good webcams list ?
1st C920 Logitech : very good (2016 awarded)
2nd (awarded) Logitech HD C615 // not tested
3rd  Microsoft Lifecam  // not tested
Other name coming often : Go pro (which model ?) // not tested, but intersting, because of the wifi (no wire!)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
22nd september 2016

No more using OpenCV window, nor sliders. Now, only SDL2 rendering is used + shortcuts
Created drawing_context.hpp, surface.hpp, menu.hpp, surface.cpp,
drawing_context.cpp, menu.c (using linked lists)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
21st september 2016

First recording implementation.
Code split : inc (.h and .hpp), sources will contain all .cpp files
Created: colors.cpp, helpers.cpp, main.cpp and setlabel.cpp (+ matching .h)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
20th september 2016

Added more events
Implemented fullscreen mode, paused mode, draw_recording 
and some other in the event loop (fake events)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
19th september 2016

Added modifiers in the event loop (KMOD*)
Implemented recording, and delay booleans, not yet working.
Worked with sdl2 keycodes catching
Tested circular buffer, to create the delay. Just buggy

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
18th september 2016

0.1 First working version, using Opencv-3.1 + SDL2
No delay, no sound either, but some events work.
Several modes are there

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
16th september 2016

Factorized delay source code, to use it as a library

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
15th september 2016

Implemented draw.cpp : allows to draw a rectangle with the mouse, and select its color (Opencv API only)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
12nd september 2016

WebcamGL : mixing Opencv and OpenGL + GLEW/GLFW + playing with several OpenGL effects 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
10th september 2016

Tested (multi-)tracking, using AKAze algorithm.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
8th september 2016

Analyzed motion-tracking source code, and tested it longly.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
7th september

Tested camshift video: select a blob, and track it
Tested geometry : in a given perspective, select 4 corners of a rectangle,
and perform the vertical projection
Played a bit with trakcing motion, and several associated algorithms, like corners.


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
6th september

Tested blob detector
Compare rectangles
Draw one rectangle
Squares detection
Detect rectangles

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
4th september 2016

Tested imread and colors with opencv API


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
3rd september 2016

Added more parameters (advanced parameters)
Tested the first Opencv-3.1 only implementation (nothing else)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

1st september 2016

Tested auto-colour filter.: used rectangle selected and some other interesting methods/algos.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
15th August 2016

Spent more than a week learning ffmpeg options, and testing a bunch of them, including searching
on the web _why_oh_why_ some didn't work. After a long week searching ... :

- I finalized the script : now works fine using ffmpeg, vlc and delay.
- the sound is now synchronized !


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
2nd August 2016 :

no sound, but just frames.
first try with a shell script named "decalage.sh", and using the excellent delay C program (GPL), written by Romain Vimont.

1st August 2016

I found delay git repository, written by from Romain Vimont, and started to play with it + ffmpeg.

